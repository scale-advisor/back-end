spring:
  application:
    name: back-end

  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher

  jooq:
    sql-dialect: MySQL

  datasource:
    url: ${DB_URL:jdbc:mysql://localhost:3306/sample?serverTimezone=Asia/Seoul&characterEncoding=UTF-8}
    username: ${DB_USERNAME:root}
    password: ${DB_USER_PASSWORD:secret}
    driver-class-name: com.mysql.cj.jdbc.Driver

  flyway:
    enabled: true
    validate-on-migrate: true
    baseline-on-migrate: true

  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:secret}

  mail:
    host: ${GOOGLE_EMAIL_HOST}
    port: ${GOOGLE_EMAIL_PORT}
    username: ${GOOGLE_EMAIL}
    password: ${GOOGLE_APP_PWD}
    properties:
      mail.smtp.auth: true
      mail.smtp.starttls.enable: true

  batch:
    jdbc:
      initialize-schema: never
    job:
      enabled: false

  quartz:
    job-store-type: jdbc
    jdbc:
      initialize-schema: always
    properties:
      org:
        quartz:
          scheduler:
            instanceName: QuartzScheduler
          threadPool:
            threadCount: 1

  servlet:
    multipart:
      max-file-size: 50MB       # 업로드 1개 파일 최대 10 MB
      max-request-size: 50MB    # 한 요청(multipart/form-data) 전체 합계 10 MB
      file-size-threshold: 2MB  # 2 MB 넘으면 바로 디스크에 쓴다(메모리 절약, 선택)

server:
  servlet:
    context-path: ${CONTEXT_PATH:/server}

springdoc:
  api-docs:
    path: /api-docs

  swagger-ui:
    path: /swagger-ui
    operations-sorter: method
    tags-sorter: alpha

key:
  salt: ${SALT_KEY:your-very-very-very-very-very-very-very-very-very-long-sentence}

kakao:
  api-key: ${KAKAO_API_KEY}
  authorize-url: ${KAKAO_AUTHORIZE_URL}
  login-redirect-url: ${KAKAO_LOGIN_REDIRECT_URL}
  token-expire-url: ${KAKAO_EXPIRE_TOKEN_URL}
  code-callback-url: ${KAKAO_CODE_CALLBACK_URL}
  userInfo-callback-url: ${KAKAO_USERINFO_CALLBACK_URL}

jwt:
  access-token-ttl: ${ACCESS_TOKEN_TTL}
  refresh-token-ttl: ${REFRESH_TOKEN_TTL}

cookies:
  domain: ${COOKIES_DOMAIN}

cors:
  allowed-origins: ${CORS_ALLOWED_ORIGINS}

gemini:
  api:
    url: ${API_URL:url}
    key: ${API_KEY:key}
    model: ${API_MODEL:model}

---
spring:
  config:
    activate:
      on-profile: local

logging:
  level:
    org.jooq.tools.LoggerListener: DEBUG

app:
  url: ${APP_URL}

storage:
  location: .storage

---
spring:
  config:
    activate:
      on-profile: prod

  cloud:
    aws:
      credentials:
        access-key: ${AWS_ACCESS_KEY_ID}
        secret-key: ${AWS_SECRET_ACCESS_KEY}
      s3:
        bucket: ${S3_BUCKET_NAME:bucket}
      region:
        static: ${AWS_REGION:ap-northeast-2}
      stack:
        auto: false

logging:
  level:
    org.jooq.tools.LoggerListener: DEBUG
  discord:
    webhook-url: ${WEB_HOOK_URL}
  config: classpath:logback.xml

app:
  url: ${APP_URL}