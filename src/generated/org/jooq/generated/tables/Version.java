/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.Keys;
import org.jooq.generated.ScaleAdvisor;
import org.jooq.generated.tables.AdjustmentFactor.AdjustmentFactorPath;
import org.jooq.generated.tables.File.FilePath;
import org.jooq.generated.tables.Project.ProjectPath;
import org.jooq.generated.tables.Requirement.RequirementPath;
import org.jooq.generated.tables.RequirementCategory.RequirementCategoryPath;
import org.jooq.generated.tables.UnitProcess.UnitProcessPath;
import org.jooq.generated.tables.records.VersionRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Version extends TableImpl<VersionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>scale_advisor.VERSION</code>
     */
    public static final Version VERSION = new Version();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VersionRecord> getRecordType() {
        return VersionRecord.class;
    }

    /**
     * The column <code>scale_advisor.VERSION.PROJECT_ID</code>.
     */
    public final TableField<VersionRecord, Long> PROJECT_ID = createField(DSL.name("PROJECT_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>scale_advisor.VERSION.VERSION_MAJOR_NUMBER</code>.
     */
    public final TableField<VersionRecord, Integer> VERSION_MAJOR_NUMBER = createField(DSL.name("VERSION_MAJOR_NUMBER"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>scale_advisor.VERSION.VERSION_MINOR_NUMBER</code>.
     */
    public final TableField<VersionRecord, Integer> VERSION_MINOR_NUMBER = createField(DSL.name("VERSION_MINOR_NUMBER"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>scale_advisor.VERSION.CREATED_AT</code>.
     */
    public final TableField<VersionRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    private Version(Name alias, Table<VersionRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Version(Name alias, Table<VersionRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>scale_advisor.VERSION</code> table reference
     */
    public Version(String alias) {
        this(DSL.name(alias), VERSION);
    }

    /**
     * Create an aliased <code>scale_advisor.VERSION</code> table reference
     */
    public Version(Name alias) {
        this(alias, VERSION);
    }

    /**
     * Create a <code>scale_advisor.VERSION</code> table reference
     */
    public Version() {
        this(DSL.name("VERSION"), null);
    }

    public <O extends Record> Version(Table<O> path, ForeignKey<O, VersionRecord> childPath, InverseForeignKey<O, VersionRecord> parentPath) {
        super(path, childPath, parentPath, VERSION);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class VersionPath extends Version implements Path<VersionRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> VersionPath(Table<O> path, ForeignKey<O, VersionRecord> childPath, InverseForeignKey<O, VersionRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private VersionPath(Name alias, Table<VersionRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public VersionPath as(String alias) {
            return new VersionPath(DSL.name(alias), this);
        }

        @Override
        public VersionPath as(Name alias) {
            return new VersionPath(alias, this);
        }

        @Override
        public VersionPath as(Table<?> alias) {
            return new VersionPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ScaleAdvisor.SCALE_ADVISOR;
    }

    @Override
    public UniqueKey<VersionRecord> getPrimaryKey() {
        return Keys.KEY_VERSION_PRIMARY;
    }

    @Override
    public List<ForeignKey<VersionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_VERSION_PROJECT_ID);
    }

    private transient ProjectPath _project;

    /**
     * Get the implicit join path to the <code>scale_advisor.PROJECT</code>
     * table.
     */
    public ProjectPath project() {
        if (_project == null)
            _project = new ProjectPath(this, Keys.FK_VERSION_PROJECT_ID, null);

        return _project;
    }

    private transient AdjustmentFactorPath _adjustmentFactor;

    /**
     * Get the implicit to-many join path to the
     * <code>scale_advisor.ADJUSTMENT_FACTOR</code> table
     */
    public AdjustmentFactorPath adjustmentFactor() {
        if (_adjustmentFactor == null)
            _adjustmentFactor = new AdjustmentFactorPath(this, null, Keys.FK_ADJUSTMENT_FACTOR_VERSION.getInverseKey());

        return _adjustmentFactor;
    }

    private transient FilePath _file;

    /**
     * Get the implicit to-many join path to the <code>scale_advisor.FILE</code>
     * table
     */
    public FilePath file() {
        if (_file == null)
            _file = new FilePath(this, null, Keys.FK_FILE_VERSION.getInverseKey());

        return _file;
    }

    private transient RequirementCategoryPath _requirementCategory;

    /**
     * Get the implicit to-many join path to the
     * <code>scale_advisor.REQUIREMENT_CATEGORY</code> table
     */
    public RequirementCategoryPath requirementCategory() {
        if (_requirementCategory == null)
            _requirementCategory = new RequirementCategoryPath(this, null, Keys.FK_REQUIREMENT_CATEGORY_VERSION.getInverseKey());

        return _requirementCategory;
    }

    private transient RequirementPath _requirement;

    /**
     * Get the implicit to-many join path to the
     * <code>scale_advisor.REQUIREMENT</code> table
     */
    public RequirementPath requirement() {
        if (_requirement == null)
            _requirement = new RequirementPath(this, null, Keys.FK_REQUIREMENT_VERSION.getInverseKey());

        return _requirement;
    }

    private transient UnitProcessPath _unitProcess;

    /**
     * Get the implicit to-many join path to the
     * <code>scale_advisor.UNIT_PROCESS</code> table
     */
    public UnitProcessPath unitProcess() {
        if (_unitProcess == null)
            _unitProcess = new UnitProcessPath(this, null, Keys.FK_UNIT_PROCESS_VERSION.getInverseKey());

        return _unitProcess;
    }

    @Override
    public Version as(String alias) {
        return new Version(DSL.name(alias), this);
    }

    @Override
    public Version as(Name alias) {
        return new Version(alias, this);
    }

    @Override
    public Version as(Table<?> alias) {
        return new Version(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Version rename(String name) {
        return new Version(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Version rename(Name name) {
        return new Version(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Version rename(Table<?> name) {
        return new Version(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Version where(Condition condition) {
        return new Version(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Version where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Version where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Version where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Version where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Version where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Version where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Version where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Version whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Version whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
