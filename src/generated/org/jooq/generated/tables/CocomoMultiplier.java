/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.Keys;
import org.jooq.generated.ScaleAdvisor;
import org.jooq.generated.tables.Project.ProjectPath;
import org.jooq.generated.tables.records.CocomoMultiplierRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CocomoMultiplier extends TableImpl<CocomoMultiplierRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>scale_advisor.COCOMO_MULTIPLIER</code>
     */
    public static final CocomoMultiplier COCOMO_MULTIPLIER = new CocomoMultiplier();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CocomoMultiplierRecord> getRecordType() {
        return CocomoMultiplierRecord.class;
    }

    /**
     * The column
     * <code>scale_advisor.COCOMO_MULTIPLIER.COCOMO_MULTIPLIER_ID</code>.
     */
    public final TableField<CocomoMultiplierRecord, Long> COCOMO_MULTIPLIER_ID = createField(DSL.name("COCOMO_MULTIPLIER_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>scale_advisor.COCOMO_MULTIPLIER.PROJECT_ID</code>.
     */
    public final TableField<CocomoMultiplierRecord, Long> PROJECT_ID = createField(DSL.name("PROJECT_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>scale_advisor.COCOMO_MULTIPLIER.RCPX</code>.
     */
    public final TableField<CocomoMultiplierRecord, String> RCPX = createField(DSL.name("RCPX"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>scale_advisor.COCOMO_MULTIPLIER.RUSE</code>.
     */
    public final TableField<CocomoMultiplierRecord, String> RUSE = createField(DSL.name("RUSE"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>scale_advisor.COCOMO_MULTIPLIER.PDIF</code>.
     */
    public final TableField<CocomoMultiplierRecord, String> PDIF = createField(DSL.name("PDIF"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>scale_advisor.COCOMO_MULTIPLIER.PERS</code>.
     */
    public final TableField<CocomoMultiplierRecord, String> PERS = createField(DSL.name("PERS"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>scale_advisor.COCOMO_MULTIPLIER.SCED</code>.
     */
    public final TableField<CocomoMultiplierRecord, String> SCED = createField(DSL.name("SCED"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>scale_advisor.COCOMO_MULTIPLIER.FCIL</code>.
     */
    public final TableField<CocomoMultiplierRecord, String> FCIL = createField(DSL.name("FCIL"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>scale_advisor.COCOMO_MULTIPLIER.CREATED_AT</code>.
     */
    public final TableField<CocomoMultiplierRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>scale_advisor.COCOMO_MULTIPLIER.UPDATED_AT</code>.
     */
    public final TableField<CocomoMultiplierRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private CocomoMultiplier(Name alias, Table<CocomoMultiplierRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private CocomoMultiplier(Name alias, Table<CocomoMultiplierRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>scale_advisor.COCOMO_MULTIPLIER</code> table
     * reference
     */
    public CocomoMultiplier(String alias) {
        this(DSL.name(alias), COCOMO_MULTIPLIER);
    }

    /**
     * Create an aliased <code>scale_advisor.COCOMO_MULTIPLIER</code> table
     * reference
     */
    public CocomoMultiplier(Name alias) {
        this(alias, COCOMO_MULTIPLIER);
    }

    /**
     * Create a <code>scale_advisor.COCOMO_MULTIPLIER</code> table reference
     */
    public CocomoMultiplier() {
        this(DSL.name("COCOMO_MULTIPLIER"), null);
    }

    public <O extends Record> CocomoMultiplier(Table<O> path, ForeignKey<O, CocomoMultiplierRecord> childPath, InverseForeignKey<O, CocomoMultiplierRecord> parentPath) {
        super(path, childPath, parentPath, COCOMO_MULTIPLIER);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class CocomoMultiplierPath extends CocomoMultiplier implements Path<CocomoMultiplierRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> CocomoMultiplierPath(Table<O> path, ForeignKey<O, CocomoMultiplierRecord> childPath, InverseForeignKey<O, CocomoMultiplierRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private CocomoMultiplierPath(Name alias, Table<CocomoMultiplierRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public CocomoMultiplierPath as(String alias) {
            return new CocomoMultiplierPath(DSL.name(alias), this);
        }

        @Override
        public CocomoMultiplierPath as(Name alias) {
            return new CocomoMultiplierPath(alias, this);
        }

        @Override
        public CocomoMultiplierPath as(Table<?> alias) {
            return new CocomoMultiplierPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ScaleAdvisor.SCALE_ADVISOR;
    }

    @Override
    public UniqueKey<CocomoMultiplierRecord> getPrimaryKey() {
        return Keys.KEY_COCOMO_MULTIPLIER_PRIMARY;
    }

    @Override
    public List<ForeignKey<CocomoMultiplierRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_COCOMO_MULTIPLIER_PROJECT_ID);
    }

    private transient ProjectPath _project;

    /**
     * Get the implicit join path to the <code>scale_advisor.PROJECT</code>
     * table.
     */
    public ProjectPath project() {
        if (_project == null)
            _project = new ProjectPath(this, Keys.FK_COCOMO_MULTIPLIER_PROJECT_ID, null);

        return _project;
    }

    @Override
    public CocomoMultiplier as(String alias) {
        return new CocomoMultiplier(DSL.name(alias), this);
    }

    @Override
    public CocomoMultiplier as(Name alias) {
        return new CocomoMultiplier(alias, this);
    }

    @Override
    public CocomoMultiplier as(Table<?> alias) {
        return new CocomoMultiplier(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CocomoMultiplier rename(String name) {
        return new CocomoMultiplier(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CocomoMultiplier rename(Name name) {
        return new CocomoMultiplier(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CocomoMultiplier rename(Table<?> name) {
        return new CocomoMultiplier(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CocomoMultiplier where(Condition condition) {
        return new CocomoMultiplier(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CocomoMultiplier where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CocomoMultiplier where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CocomoMultiplier where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CocomoMultiplier where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CocomoMultiplier where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CocomoMultiplier where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CocomoMultiplier where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CocomoMultiplier whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CocomoMultiplier whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
