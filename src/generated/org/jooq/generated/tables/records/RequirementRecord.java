/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.records;


import java.time.LocalDateTime;

import org.jooq.Record1;
import org.jooq.generated.tables.Requirement;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RequirementRecord extends UpdatableRecordImpl<RequirementRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>scale_advisor.REQUIREMENT.REQUIREMENT_ID</code>.
     */
    public RequirementRecord setRequirementId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>scale_advisor.REQUIREMENT.REQUIREMENT_ID</code>.
     */
    public Long getRequirementId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>scale_advisor.REQUIREMENT.PROJECT_ID</code>.
     */
    public RequirementRecord setProjectId(Long value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>scale_advisor.REQUIREMENT.PROJECT_ID</code>.
     */
    public Long getProjectId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>scale_advisor.REQUIREMENT.VERSION_MAJOR_NUMBER</code>.
     */
    public RequirementRecord setVersionMajorNumber(Integer value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>scale_advisor.REQUIREMENT.VERSION_MAJOR_NUMBER</code>.
     */
    public Integer getVersionMajorNumber() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>scale_advisor.REQUIREMENT.VERSION_MINOR_NUMBER</code>.
     */
    public RequirementRecord setVersionMinorNumber(Integer value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>scale_advisor.REQUIREMENT.VERSION_MINOR_NUMBER</code>.
     */
    public Integer getVersionMinorNumber() {
        return (Integer) get(3);
    }

    /**
     * Setter for <code>scale_advisor.REQUIREMENT.REQUIREMENT_NUMBER</code>.
     */
    public RequirementRecord setRequirementNumber(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>scale_advisor.REQUIREMENT.REQUIREMENT_NUMBER</code>.
     */
    public String getRequirementNumber() {
        return (String) get(4);
    }

    /**
     * Setter for <code>scale_advisor.REQUIREMENT.REQUIREMENT_NAME</code>.
     */
    public RequirementRecord setRequirementName(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>scale_advisor.REQUIREMENT.REQUIREMENT_NAME</code>.
     */
    public String getRequirementName() {
        return (String) get(5);
    }

    /**
     * Setter for
     * <code>scale_advisor.REQUIREMENT.REQUIREMENT_DETAIL_NUMBER</code>.
     */
    public RequirementRecord setRequirementDetailNumber(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for
     * <code>scale_advisor.REQUIREMENT.REQUIREMENT_DETAIL_NUMBER</code>.
     */
    public String getRequirementDetailNumber() {
        return (String) get(6);
    }

    /**
     * Setter for <code>scale_advisor.REQUIREMENT.REQUIREMENT_DETAIL</code>.
     */
    public RequirementRecord setRequirementDetail(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>scale_advisor.REQUIREMENT.REQUIREMENT_DETAIL</code>.
     */
    public String getRequirementDetail() {
        return (String) get(7);
    }

    /**
     * Setter for <code>scale_advisor.REQUIREMENT.REQUIREMENT_TYPE</code>.
     */
    public RequirementRecord setRequirementType(String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>scale_advisor.REQUIREMENT.REQUIREMENT_TYPE</code>.
     */
    public String getRequirementType() {
        return (String) get(8);
    }

    /**
     * Setter for <code>scale_advisor.REQUIREMENT.CREATED_AT</code>.
     */
    public RequirementRecord setCreatedAt(LocalDateTime value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>scale_advisor.REQUIREMENT.CREATED_AT</code>.
     */
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(9);
    }

    /**
     * Setter for <code>scale_advisor.REQUIREMENT.UPDATED_AT</code>.
     */
    public RequirementRecord setUpdatedAt(LocalDateTime value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>scale_advisor.REQUIREMENT.UPDATED_AT</code>.
     */
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(10);
    }

    /**
     * Setter for <code>scale_advisor.REQUIREMENT.NOTE</code>.
     */
    public RequirementRecord setNote(String value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>scale_advisor.REQUIREMENT.NOTE</code>.
     */
    public String getNote() {
        return (String) get(11);
    }

    /**
     * Setter for <code>scale_advisor.REQUIREMENT.REQUIREMENT_DEFINITION</code>.
     */
    public RequirementRecord setRequirementDefinition(String value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>scale_advisor.REQUIREMENT.REQUIREMENT_DEFINITION</code>.
     */
    public String getRequirementDefinition() {
        return (String) get(12);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached RequirementRecord
     */
    public RequirementRecord() {
        super(Requirement.REQUIREMENT);
    }

    /**
     * Create a detached, initialised RequirementRecord
     */
    public RequirementRecord(Long requirementId, Long projectId, Integer versionMajorNumber, Integer versionMinorNumber, String requirementNumber, String requirementName, String requirementDetailNumber, String requirementDetail, String requirementType, LocalDateTime createdAt, LocalDateTime updatedAt, String note, String requirementDefinition) {
        super(Requirement.REQUIREMENT);

        setRequirementId(requirementId);
        setProjectId(projectId);
        setVersionMajorNumber(versionMajorNumber);
        setVersionMinorNumber(versionMinorNumber);
        setRequirementNumber(requirementNumber);
        setRequirementName(requirementName);
        setRequirementDetailNumber(requirementDetailNumber);
        setRequirementDetail(requirementDetail);
        setRequirementType(requirementType);
        setCreatedAt(createdAt);
        setUpdatedAt(updatedAt);
        setNote(note);
        setRequirementDefinition(requirementDefinition);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised RequirementRecord
     */
    public RequirementRecord(org.jooq.generated.tables.pojos.Requirement value) {
        super(Requirement.REQUIREMENT);

        if (value != null) {
            setRequirementId(value.getRequirementId());
            setProjectId(value.getProjectId());
            setVersionMajorNumber(value.getVersionMajorNumber());
            setVersionMinorNumber(value.getVersionMinorNumber());
            setRequirementNumber(value.getRequirementNumber());
            setRequirementName(value.getRequirementName());
            setRequirementDetailNumber(value.getRequirementDetailNumber());
            setRequirementDetail(value.getRequirementDetail());
            setRequirementType(value.getRequirementType());
            setCreatedAt(value.getCreatedAt());
            setUpdatedAt(value.getUpdatedAt());
            setNote(value.getNote());
            setRequirementDefinition(value.getRequirementDefinition());
            resetChangedOnNotNull();
        }
    }
}
