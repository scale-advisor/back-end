/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.records;


import java.time.LocalDateTime;

import org.jooq.Record1;
import org.jooq.generated.tables.BatchStepExecution;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BatchStepExecutionRecord extends UpdatableRecordImpl<BatchStepExecutionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for
     * <code>scale_advisor.BATCH_STEP_EXECUTION.STEP_EXECUTION_ID</code>.
     */
    public BatchStepExecutionRecord setStepExecutionId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for
     * <code>scale_advisor.BATCH_STEP_EXECUTION.STEP_EXECUTION_ID</code>.
     */
    public Long getStepExecutionId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>scale_advisor.BATCH_STEP_EXECUTION.VERSION</code>.
     */
    public BatchStepExecutionRecord setVersion(Long value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>scale_advisor.BATCH_STEP_EXECUTION.VERSION</code>.
     */
    public Long getVersion() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>scale_advisor.BATCH_STEP_EXECUTION.STEP_NAME</code>.
     */
    public BatchStepExecutionRecord setStepName(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>scale_advisor.BATCH_STEP_EXECUTION.STEP_NAME</code>.
     */
    public String getStepName() {
        return (String) get(2);
    }

    /**
     * Setter for
     * <code>scale_advisor.BATCH_STEP_EXECUTION.JOB_EXECUTION_ID</code>.
     */
    public BatchStepExecutionRecord setJobExecutionId(Long value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for
     * <code>scale_advisor.BATCH_STEP_EXECUTION.JOB_EXECUTION_ID</code>.
     */
    public Long getJobExecutionId() {
        return (Long) get(3);
    }

    /**
     * Setter for <code>scale_advisor.BATCH_STEP_EXECUTION.CREATE_TIME</code>.
     */
    public BatchStepExecutionRecord setCreateTime(LocalDateTime value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>scale_advisor.BATCH_STEP_EXECUTION.CREATE_TIME</code>.
     */
    public LocalDateTime getCreateTime() {
        return (LocalDateTime) get(4);
    }

    /**
     * Setter for <code>scale_advisor.BATCH_STEP_EXECUTION.START_TIME</code>.
     */
    public BatchStepExecutionRecord setStartTime(LocalDateTime value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>scale_advisor.BATCH_STEP_EXECUTION.START_TIME</code>.
     */
    public LocalDateTime getStartTime() {
        return (LocalDateTime) get(5);
    }

    /**
     * Setter for <code>scale_advisor.BATCH_STEP_EXECUTION.END_TIME</code>.
     */
    public BatchStepExecutionRecord setEndTime(LocalDateTime value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>scale_advisor.BATCH_STEP_EXECUTION.END_TIME</code>.
     */
    public LocalDateTime getEndTime() {
        return (LocalDateTime) get(6);
    }

    /**
     * Setter for <code>scale_advisor.BATCH_STEP_EXECUTION.STATUS</code>.
     */
    public BatchStepExecutionRecord setStatus(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>scale_advisor.BATCH_STEP_EXECUTION.STATUS</code>.
     */
    public String getStatus() {
        return (String) get(7);
    }

    /**
     * Setter for <code>scale_advisor.BATCH_STEP_EXECUTION.COMMIT_COUNT</code>.
     */
    public BatchStepExecutionRecord setCommitCount(Long value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>scale_advisor.BATCH_STEP_EXECUTION.COMMIT_COUNT</code>.
     */
    public Long getCommitCount() {
        return (Long) get(8);
    }

    /**
     * Setter for <code>scale_advisor.BATCH_STEP_EXECUTION.READ_COUNT</code>.
     */
    public BatchStepExecutionRecord setReadCount(Long value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>scale_advisor.BATCH_STEP_EXECUTION.READ_COUNT</code>.
     */
    public Long getReadCount() {
        return (Long) get(9);
    }

    /**
     * Setter for <code>scale_advisor.BATCH_STEP_EXECUTION.FILTER_COUNT</code>.
     */
    public BatchStepExecutionRecord setFilterCount(Long value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>scale_advisor.BATCH_STEP_EXECUTION.FILTER_COUNT</code>.
     */
    public Long getFilterCount() {
        return (Long) get(10);
    }

    /**
     * Setter for <code>scale_advisor.BATCH_STEP_EXECUTION.WRITE_COUNT</code>.
     */
    public BatchStepExecutionRecord setWriteCount(Long value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>scale_advisor.BATCH_STEP_EXECUTION.WRITE_COUNT</code>.
     */
    public Long getWriteCount() {
        return (Long) get(11);
    }

    /**
     * Setter for
     * <code>scale_advisor.BATCH_STEP_EXECUTION.READ_SKIP_COUNT</code>.
     */
    public BatchStepExecutionRecord setReadSkipCount(Long value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for
     * <code>scale_advisor.BATCH_STEP_EXECUTION.READ_SKIP_COUNT</code>.
     */
    public Long getReadSkipCount() {
        return (Long) get(12);
    }

    /**
     * Setter for
     * <code>scale_advisor.BATCH_STEP_EXECUTION.WRITE_SKIP_COUNT</code>.
     */
    public BatchStepExecutionRecord setWriteSkipCount(Long value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for
     * <code>scale_advisor.BATCH_STEP_EXECUTION.WRITE_SKIP_COUNT</code>.
     */
    public Long getWriteSkipCount() {
        return (Long) get(13);
    }

    /**
     * Setter for
     * <code>scale_advisor.BATCH_STEP_EXECUTION.PROCESS_SKIP_COUNT</code>.
     */
    public BatchStepExecutionRecord setProcessSkipCount(Long value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for
     * <code>scale_advisor.BATCH_STEP_EXECUTION.PROCESS_SKIP_COUNT</code>.
     */
    public Long getProcessSkipCount() {
        return (Long) get(14);
    }

    /**
     * Setter for
     * <code>scale_advisor.BATCH_STEP_EXECUTION.ROLLBACK_COUNT</code>.
     */
    public BatchStepExecutionRecord setRollbackCount(Long value) {
        set(15, value);
        return this;
    }

    /**
     * Getter for
     * <code>scale_advisor.BATCH_STEP_EXECUTION.ROLLBACK_COUNT</code>.
     */
    public Long getRollbackCount() {
        return (Long) get(15);
    }

    /**
     * Setter for <code>scale_advisor.BATCH_STEP_EXECUTION.EXIT_CODE</code>.
     */
    public BatchStepExecutionRecord setExitCode(String value) {
        set(16, value);
        return this;
    }

    /**
     * Getter for <code>scale_advisor.BATCH_STEP_EXECUTION.EXIT_CODE</code>.
     */
    public String getExitCode() {
        return (String) get(16);
    }

    /**
     * Setter for <code>scale_advisor.BATCH_STEP_EXECUTION.EXIT_MESSAGE</code>.
     */
    public BatchStepExecutionRecord setExitMessage(String value) {
        set(17, value);
        return this;
    }

    /**
     * Getter for <code>scale_advisor.BATCH_STEP_EXECUTION.EXIT_MESSAGE</code>.
     */
    public String getExitMessage() {
        return (String) get(17);
    }

    /**
     * Setter for <code>scale_advisor.BATCH_STEP_EXECUTION.LAST_UPDATED</code>.
     */
    public BatchStepExecutionRecord setLastUpdated(LocalDateTime value) {
        set(18, value);
        return this;
    }

    /**
     * Getter for <code>scale_advisor.BATCH_STEP_EXECUTION.LAST_UPDATED</code>.
     */
    public LocalDateTime getLastUpdated() {
        return (LocalDateTime) get(18);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached BatchStepExecutionRecord
     */
    public BatchStepExecutionRecord() {
        super(BatchStepExecution.BATCH_STEP_EXECUTION);
    }

    /**
     * Create a detached, initialised BatchStepExecutionRecord
     */
    public BatchStepExecutionRecord(Long stepExecutionId, Long version, String stepName, Long jobExecutionId, LocalDateTime createTime, LocalDateTime startTime, LocalDateTime endTime, String status, Long commitCount, Long readCount, Long filterCount, Long writeCount, Long readSkipCount, Long writeSkipCount, Long processSkipCount, Long rollbackCount, String exitCode, String exitMessage, LocalDateTime lastUpdated) {
        super(BatchStepExecution.BATCH_STEP_EXECUTION);

        setStepExecutionId(stepExecutionId);
        setVersion(version);
        setStepName(stepName);
        setJobExecutionId(jobExecutionId);
        setCreateTime(createTime);
        setStartTime(startTime);
        setEndTime(endTime);
        setStatus(status);
        setCommitCount(commitCount);
        setReadCount(readCount);
        setFilterCount(filterCount);
        setWriteCount(writeCount);
        setReadSkipCount(readSkipCount);
        setWriteSkipCount(writeSkipCount);
        setProcessSkipCount(processSkipCount);
        setRollbackCount(rollbackCount);
        setExitCode(exitCode);
        setExitMessage(exitMessage);
        setLastUpdated(lastUpdated);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised BatchStepExecutionRecord
     */
    public BatchStepExecutionRecord(org.jooq.generated.tables.pojos.BatchStepExecution value) {
        super(BatchStepExecution.BATCH_STEP_EXECUTION);

        if (value != null) {
            setStepExecutionId(value.getStepExecutionId());
            setVersion(value.getVersion());
            setStepName(value.getStepName());
            setJobExecutionId(value.getJobExecutionId());
            setCreateTime(value.getCreateTime());
            setStartTime(value.getStartTime());
            setEndTime(value.getEndTime());
            setStatus(value.getStatus());
            setCommitCount(value.getCommitCount());
            setReadCount(value.getReadCount());
            setFilterCount(value.getFilterCount());
            setWriteCount(value.getWriteCount());
            setReadSkipCount(value.getReadSkipCount());
            setWriteSkipCount(value.getWriteSkipCount());
            setProcessSkipCount(value.getProcessSkipCount());
            setRollbackCount(value.getRollbackCount());
            setExitCode(value.getExitCode());
            setExitMessage(value.getExitMessage());
            setLastUpdated(value.getLastUpdated());
            resetChangedOnNotNull();
        }
    }
}
