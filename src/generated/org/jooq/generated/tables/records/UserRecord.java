/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.records;


import java.time.LocalDateTime;

import org.jooq.Record1;
import org.jooq.generated.tables.User;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserRecord extends UpdatableRecordImpl<UserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>scale_advisor.USER.USER_ID</code>.
     */
    public UserRecord setUserId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>scale_advisor.USER.USER_ID</code>.
     */
    public Long getUserId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>scale_advisor.USER.EMAIL</code>.
     */
    public UserRecord setEmail(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>scale_advisor.USER.EMAIL</code>.
     */
    public String getEmail() {
        return (String) get(1);
    }

    /**
     * Setter for <code>scale_advisor.USER.PASSWORD</code>.
     */
    public UserRecord setPassword(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>scale_advisor.USER.PASSWORD</code>.
     */
    public String getPassword() {
        return (String) get(2);
    }

    /**
     * Setter for <code>scale_advisor.USER.NAME</code>.
     */
    public UserRecord setName(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>scale_advisor.USER.NAME</code>.
     */
    public String getName() {
        return (String) get(3);
    }

    /**
     * Setter for <code>scale_advisor.USER.SOCIAL_ID</code>.
     */
    public UserRecord setSocialId(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>scale_advisor.USER.SOCIAL_ID</code>.
     */
    public String getSocialId() {
        return (String) get(4);
    }

    /**
     * Setter for <code>scale_advisor.USER.LOGIN_TYPE</code>.
     */
    public UserRecord setLoginType(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>scale_advisor.USER.LOGIN_TYPE</code>.
     */
    public String getLoginType() {
        return (String) get(5);
    }

    /**
     * Setter for <code>scale_advisor.USER.CONFIRMED</code>.
     */
    public UserRecord setConfirmed(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>scale_advisor.USER.CONFIRMED</code>.
     */
    public String getConfirmed() {
        return (String) get(6);
    }

    /**
     * Setter for <code>scale_advisor.USER.CREATED_AT</code>.
     */
    public UserRecord setCreatedAt(LocalDateTime value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>scale_advisor.USER.CREATED_AT</code>.
     */
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(7);
    }

    /**
     * Setter for <code>scale_advisor.USER.UPDATED_AT</code>.
     */
    public UserRecord setUpdatedAt(LocalDateTime value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>scale_advisor.USER.UPDATED_AT</code>.
     */
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(8);
    }

    /**
     * Setter for <code>scale_advisor.USER.DELETED_AT</code>.
     */
    public UserRecord setDeletedAt(LocalDateTime value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>scale_advisor.USER.DELETED_AT</code>.
     */
    public LocalDateTime getDeletedAt() {
        return (LocalDateTime) get(9);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UserRecord
     */
    public UserRecord() {
        super(User.USER);
    }

    /**
     * Create a detached, initialised UserRecord
     */
    public UserRecord(Long userId, String email, String password, String name, String socialId, String loginType, String confirmed, LocalDateTime createdAt, LocalDateTime updatedAt, LocalDateTime deletedAt) {
        super(User.USER);

        setUserId(userId);
        setEmail(email);
        setPassword(password);
        setName(name);
        setSocialId(socialId);
        setLoginType(loginType);
        setConfirmed(confirmed);
        setCreatedAt(createdAt);
        setUpdatedAt(updatedAt);
        setDeletedAt(deletedAt);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised UserRecord
     */
    public UserRecord(org.jooq.generated.tables.pojos.User value) {
        super(User.USER);

        if (value != null) {
            setUserId(value.getUserId());
            setEmail(value.getEmail());
            setPassword(value.getPassword());
            setName(value.getName());
            setSocialId(value.getSocialId());
            setLoginType(value.getLoginType());
            setConfirmed(value.getConfirmed());
            setCreatedAt(value.getCreatedAt());
            setUpdatedAt(value.getUpdatedAt());
            setDeletedAt(value.getDeletedAt());
            resetChangedOnNotNull();
        }
    }
}
