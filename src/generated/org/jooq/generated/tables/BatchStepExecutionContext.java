/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.Keys;
import org.jooq.generated.ScaleAdvisor;
import org.jooq.generated.tables.BatchStepExecution.BatchStepExecutionPath;
import org.jooq.generated.tables.records.BatchStepExecutionContextRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BatchStepExecutionContext extends TableImpl<BatchStepExecutionContextRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>scale_advisor.BATCH_STEP_EXECUTION_CONTEXT</code>
     */
    public static final BatchStepExecutionContext BATCH_STEP_EXECUTION_CONTEXT = new BatchStepExecutionContext();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BatchStepExecutionContextRecord> getRecordType() {
        return BatchStepExecutionContextRecord.class;
    }

    /**
     * The column
     * <code>scale_advisor.BATCH_STEP_EXECUTION_CONTEXT.STEP_EXECUTION_ID</code>.
     */
    public final TableField<BatchStepExecutionContextRecord, Long> STEP_EXECUTION_ID = createField(DSL.name("STEP_EXECUTION_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>scale_advisor.BATCH_STEP_EXECUTION_CONTEXT.SHORT_CONTEXT</code>.
     */
    public final TableField<BatchStepExecutionContextRecord, String> SHORT_CONTEXT = createField(DSL.name("SHORT_CONTEXT"), SQLDataType.VARCHAR(2500).nullable(false), this, "");

    /**
     * The column
     * <code>scale_advisor.BATCH_STEP_EXECUTION_CONTEXT.SERIALIZED_CONTEXT</code>.
     */
    public final TableField<BatchStepExecutionContextRecord, String> SERIALIZED_CONTEXT = createField(DSL.name("SERIALIZED_CONTEXT"), SQLDataType.CLOB, this, "");

    private BatchStepExecutionContext(Name alias, Table<BatchStepExecutionContextRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private BatchStepExecutionContext(Name alias, Table<BatchStepExecutionContextRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>scale_advisor.BATCH_STEP_EXECUTION_CONTEXT</code>
     * table reference
     */
    public BatchStepExecutionContext(String alias) {
        this(DSL.name(alias), BATCH_STEP_EXECUTION_CONTEXT);
    }

    /**
     * Create an aliased <code>scale_advisor.BATCH_STEP_EXECUTION_CONTEXT</code>
     * table reference
     */
    public BatchStepExecutionContext(Name alias) {
        this(alias, BATCH_STEP_EXECUTION_CONTEXT);
    }

    /**
     * Create a <code>scale_advisor.BATCH_STEP_EXECUTION_CONTEXT</code> table
     * reference
     */
    public BatchStepExecutionContext() {
        this(DSL.name("BATCH_STEP_EXECUTION_CONTEXT"), null);
    }

    public <O extends Record> BatchStepExecutionContext(Table<O> path, ForeignKey<O, BatchStepExecutionContextRecord> childPath, InverseForeignKey<O, BatchStepExecutionContextRecord> parentPath) {
        super(path, childPath, parentPath, BATCH_STEP_EXECUTION_CONTEXT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class BatchStepExecutionContextPath extends BatchStepExecutionContext implements Path<BatchStepExecutionContextRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> BatchStepExecutionContextPath(Table<O> path, ForeignKey<O, BatchStepExecutionContextRecord> childPath, InverseForeignKey<O, BatchStepExecutionContextRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private BatchStepExecutionContextPath(Name alias, Table<BatchStepExecutionContextRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public BatchStepExecutionContextPath as(String alias) {
            return new BatchStepExecutionContextPath(DSL.name(alias), this);
        }

        @Override
        public BatchStepExecutionContextPath as(Name alias) {
            return new BatchStepExecutionContextPath(alias, this);
        }

        @Override
        public BatchStepExecutionContextPath as(Table<?> alias) {
            return new BatchStepExecutionContextPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ScaleAdvisor.SCALE_ADVISOR;
    }

    @Override
    public UniqueKey<BatchStepExecutionContextRecord> getPrimaryKey() {
        return Keys.KEY_BATCH_STEP_EXECUTION_CONTEXT_PRIMARY;
    }

    @Override
    public List<ForeignKey<BatchStepExecutionContextRecord, ?>> getReferences() {
        return Arrays.asList(Keys.STEP_EXEC_CTX_FK);
    }

    private transient BatchStepExecutionPath _batchStepExecution;

    /**
     * Get the implicit join path to the
     * <code>scale_advisor.BATCH_STEP_EXECUTION</code> table.
     */
    public BatchStepExecutionPath batchStepExecution() {
        if (_batchStepExecution == null)
            _batchStepExecution = new BatchStepExecutionPath(this, Keys.STEP_EXEC_CTX_FK, null);

        return _batchStepExecution;
    }

    @Override
    public BatchStepExecutionContext as(String alias) {
        return new BatchStepExecutionContext(DSL.name(alias), this);
    }

    @Override
    public BatchStepExecutionContext as(Name alias) {
        return new BatchStepExecutionContext(alias, this);
    }

    @Override
    public BatchStepExecutionContext as(Table<?> alias) {
        return new BatchStepExecutionContext(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public BatchStepExecutionContext rename(String name) {
        return new BatchStepExecutionContext(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BatchStepExecutionContext rename(Name name) {
        return new BatchStepExecutionContext(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public BatchStepExecutionContext rename(Table<?> name) {
        return new BatchStepExecutionContext(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BatchStepExecutionContext where(Condition condition) {
        return new BatchStepExecutionContext(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BatchStepExecutionContext where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BatchStepExecutionContext where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BatchStepExecutionContext where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BatchStepExecutionContext where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BatchStepExecutionContext where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BatchStepExecutionContext where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BatchStepExecutionContext where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BatchStepExecutionContext whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BatchStepExecutionContext whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
