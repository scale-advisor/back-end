/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.Keys;
import org.jooq.generated.ScaleAdvisor;
import org.jooq.generated.tables.records.BatchJobSeqRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BatchJobSeq extends TableImpl<BatchJobSeqRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>scale_advisor.BATCH_JOB_SEQ</code>
     */
    public static final BatchJobSeq BATCH_JOB_SEQ = new BatchJobSeq();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BatchJobSeqRecord> getRecordType() {
        return BatchJobSeqRecord.class;
    }

    /**
     * The column <code>scale_advisor.BATCH_JOB_SEQ.ID</code>.
     */
    public final TableField<BatchJobSeqRecord, Long> ID = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>scale_advisor.BATCH_JOB_SEQ.UNIQUE_KEY</code>.
     */
    public final TableField<BatchJobSeqRecord, String> UNIQUE_KEY = createField(DSL.name("UNIQUE_KEY"), SQLDataType.CHAR(1).nullable(false), this, "");

    private BatchJobSeq(Name alias, Table<BatchJobSeqRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private BatchJobSeq(Name alias, Table<BatchJobSeqRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>scale_advisor.BATCH_JOB_SEQ</code> table
     * reference
     */
    public BatchJobSeq(String alias) {
        this(DSL.name(alias), BATCH_JOB_SEQ);
    }

    /**
     * Create an aliased <code>scale_advisor.BATCH_JOB_SEQ</code> table
     * reference
     */
    public BatchJobSeq(Name alias) {
        this(alias, BATCH_JOB_SEQ);
    }

    /**
     * Create a <code>scale_advisor.BATCH_JOB_SEQ</code> table reference
     */
    public BatchJobSeq() {
        this(DSL.name("BATCH_JOB_SEQ"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ScaleAdvisor.SCALE_ADVISOR;
    }

    @Override
    public List<UniqueKey<BatchJobSeqRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_BATCH_JOB_SEQ_UNIQUE_KEY_UN);
    }

    @Override
    public BatchJobSeq as(String alias) {
        return new BatchJobSeq(DSL.name(alias), this);
    }

    @Override
    public BatchJobSeq as(Name alias) {
        return new BatchJobSeq(alias, this);
    }

    @Override
    public BatchJobSeq as(Table<?> alias) {
        return new BatchJobSeq(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public BatchJobSeq rename(String name) {
        return new BatchJobSeq(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BatchJobSeq rename(Name name) {
        return new BatchJobSeq(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public BatchJobSeq rename(Table<?> name) {
        return new BatchJobSeq(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BatchJobSeq where(Condition condition) {
        return new BatchJobSeq(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BatchJobSeq where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BatchJobSeq where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BatchJobSeq where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BatchJobSeq where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BatchJobSeq where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BatchJobSeq where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BatchJobSeq where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BatchJobSeq whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BatchJobSeq whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
