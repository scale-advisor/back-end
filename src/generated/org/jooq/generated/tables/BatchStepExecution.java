/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.Keys;
import org.jooq.generated.ScaleAdvisor;
import org.jooq.generated.tables.BatchJobExecution.BatchJobExecutionPath;
import org.jooq.generated.tables.BatchStepExecutionContext.BatchStepExecutionContextPath;
import org.jooq.generated.tables.records.BatchStepExecutionRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BatchStepExecution extends TableImpl<BatchStepExecutionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>scale_advisor.BATCH_STEP_EXECUTION</code>
     */
    public static final BatchStepExecution BATCH_STEP_EXECUTION = new BatchStepExecution();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BatchStepExecutionRecord> getRecordType() {
        return BatchStepExecutionRecord.class;
    }

    /**
     * The column
     * <code>scale_advisor.BATCH_STEP_EXECUTION.STEP_EXECUTION_ID</code>.
     */
    public final TableField<BatchStepExecutionRecord, Long> STEP_EXECUTION_ID = createField(DSL.name("STEP_EXECUTION_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>scale_advisor.BATCH_STEP_EXECUTION.VERSION</code>.
     */
    public final TableField<BatchStepExecutionRecord, Long> VERSION = createField(DSL.name("VERSION"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>scale_advisor.BATCH_STEP_EXECUTION.STEP_NAME</code>.
     */
    public final TableField<BatchStepExecutionRecord, String> STEP_NAME = createField(DSL.name("STEP_NAME"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column
     * <code>scale_advisor.BATCH_STEP_EXECUTION.JOB_EXECUTION_ID</code>.
     */
    public final TableField<BatchStepExecutionRecord, Long> JOB_EXECUTION_ID = createField(DSL.name("JOB_EXECUTION_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>scale_advisor.BATCH_STEP_EXECUTION.CREATE_TIME</code>.
     */
    public final TableField<BatchStepExecutionRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("CREATE_TIME"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>scale_advisor.BATCH_STEP_EXECUTION.START_TIME</code>.
     */
    public final TableField<BatchStepExecutionRecord, LocalDateTime> START_TIME = createField(DSL.name("START_TIME"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>scale_advisor.BATCH_STEP_EXECUTION.END_TIME</code>.
     */
    public final TableField<BatchStepExecutionRecord, LocalDateTime> END_TIME = createField(DSL.name("END_TIME"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>scale_advisor.BATCH_STEP_EXECUTION.STATUS</code>.
     */
    public final TableField<BatchStepExecutionRecord, String> STATUS = createField(DSL.name("STATUS"), SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>scale_advisor.BATCH_STEP_EXECUTION.COMMIT_COUNT</code>.
     */
    public final TableField<BatchStepExecutionRecord, Long> COMMIT_COUNT = createField(DSL.name("COMMIT_COUNT"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>scale_advisor.BATCH_STEP_EXECUTION.READ_COUNT</code>.
     */
    public final TableField<BatchStepExecutionRecord, Long> READ_COUNT = createField(DSL.name("READ_COUNT"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>scale_advisor.BATCH_STEP_EXECUTION.FILTER_COUNT</code>.
     */
    public final TableField<BatchStepExecutionRecord, Long> FILTER_COUNT = createField(DSL.name("FILTER_COUNT"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>scale_advisor.BATCH_STEP_EXECUTION.WRITE_COUNT</code>.
     */
    public final TableField<BatchStepExecutionRecord, Long> WRITE_COUNT = createField(DSL.name("WRITE_COUNT"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>scale_advisor.BATCH_STEP_EXECUTION.READ_SKIP_COUNT</code>.
     */
    public final TableField<BatchStepExecutionRecord, Long> READ_SKIP_COUNT = createField(DSL.name("READ_SKIP_COUNT"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>scale_advisor.BATCH_STEP_EXECUTION.WRITE_SKIP_COUNT</code>.
     */
    public final TableField<BatchStepExecutionRecord, Long> WRITE_SKIP_COUNT = createField(DSL.name("WRITE_SKIP_COUNT"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>scale_advisor.BATCH_STEP_EXECUTION.PROCESS_SKIP_COUNT</code>.
     */
    public final TableField<BatchStepExecutionRecord, Long> PROCESS_SKIP_COUNT = createField(DSL.name("PROCESS_SKIP_COUNT"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>scale_advisor.BATCH_STEP_EXECUTION.ROLLBACK_COUNT</code>.
     */
    public final TableField<BatchStepExecutionRecord, Long> ROLLBACK_COUNT = createField(DSL.name("ROLLBACK_COUNT"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>scale_advisor.BATCH_STEP_EXECUTION.EXIT_CODE</code>.
     */
    public final TableField<BatchStepExecutionRecord, String> EXIT_CODE = createField(DSL.name("EXIT_CODE"), SQLDataType.VARCHAR(2500), this, "");

    /**
     * The column <code>scale_advisor.BATCH_STEP_EXECUTION.EXIT_MESSAGE</code>.
     */
    public final TableField<BatchStepExecutionRecord, String> EXIT_MESSAGE = createField(DSL.name("EXIT_MESSAGE"), SQLDataType.VARCHAR(2500), this, "");

    /**
     * The column <code>scale_advisor.BATCH_STEP_EXECUTION.LAST_UPDATED</code>.
     */
    public final TableField<BatchStepExecutionRecord, LocalDateTime> LAST_UPDATED = createField(DSL.name("LAST_UPDATED"), SQLDataType.LOCALDATETIME(6), this, "");

    private BatchStepExecution(Name alias, Table<BatchStepExecutionRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private BatchStepExecution(Name alias, Table<BatchStepExecutionRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>scale_advisor.BATCH_STEP_EXECUTION</code> table
     * reference
     */
    public BatchStepExecution(String alias) {
        this(DSL.name(alias), BATCH_STEP_EXECUTION);
    }

    /**
     * Create an aliased <code>scale_advisor.BATCH_STEP_EXECUTION</code> table
     * reference
     */
    public BatchStepExecution(Name alias) {
        this(alias, BATCH_STEP_EXECUTION);
    }

    /**
     * Create a <code>scale_advisor.BATCH_STEP_EXECUTION</code> table reference
     */
    public BatchStepExecution() {
        this(DSL.name("BATCH_STEP_EXECUTION"), null);
    }

    public <O extends Record> BatchStepExecution(Table<O> path, ForeignKey<O, BatchStepExecutionRecord> childPath, InverseForeignKey<O, BatchStepExecutionRecord> parentPath) {
        super(path, childPath, parentPath, BATCH_STEP_EXECUTION);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class BatchStepExecutionPath extends BatchStepExecution implements Path<BatchStepExecutionRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> BatchStepExecutionPath(Table<O> path, ForeignKey<O, BatchStepExecutionRecord> childPath, InverseForeignKey<O, BatchStepExecutionRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private BatchStepExecutionPath(Name alias, Table<BatchStepExecutionRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public BatchStepExecutionPath as(String alias) {
            return new BatchStepExecutionPath(DSL.name(alias), this);
        }

        @Override
        public BatchStepExecutionPath as(Name alias) {
            return new BatchStepExecutionPath(alias, this);
        }

        @Override
        public BatchStepExecutionPath as(Table<?> alias) {
            return new BatchStepExecutionPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ScaleAdvisor.SCALE_ADVISOR;
    }

    @Override
    public UniqueKey<BatchStepExecutionRecord> getPrimaryKey() {
        return Keys.KEY_BATCH_STEP_EXECUTION_PRIMARY;
    }

    @Override
    public List<ForeignKey<BatchStepExecutionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.JOB_EXEC_STEP_FK);
    }

    private transient BatchJobExecutionPath _batchJobExecution;

    /**
     * Get the implicit join path to the
     * <code>scale_advisor.BATCH_JOB_EXECUTION</code> table.
     */
    public BatchJobExecutionPath batchJobExecution() {
        if (_batchJobExecution == null)
            _batchJobExecution = new BatchJobExecutionPath(this, Keys.JOB_EXEC_STEP_FK, null);

        return _batchJobExecution;
    }

    private transient BatchStepExecutionContextPath _batchStepExecutionContext;

    /**
     * Get the implicit to-many join path to the
     * <code>scale_advisor.BATCH_STEP_EXECUTION_CONTEXT</code> table
     */
    public BatchStepExecutionContextPath batchStepExecutionContext() {
        if (_batchStepExecutionContext == null)
            _batchStepExecutionContext = new BatchStepExecutionContextPath(this, null, Keys.STEP_EXEC_CTX_FK.getInverseKey());

        return _batchStepExecutionContext;
    }

    @Override
    public BatchStepExecution as(String alias) {
        return new BatchStepExecution(DSL.name(alias), this);
    }

    @Override
    public BatchStepExecution as(Name alias) {
        return new BatchStepExecution(alias, this);
    }

    @Override
    public BatchStepExecution as(Table<?> alias) {
        return new BatchStepExecution(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public BatchStepExecution rename(String name) {
        return new BatchStepExecution(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BatchStepExecution rename(Name name) {
        return new BatchStepExecution(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public BatchStepExecution rename(Table<?> name) {
        return new BatchStepExecution(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BatchStepExecution where(Condition condition) {
        return new BatchStepExecution(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BatchStepExecution where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BatchStepExecution where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BatchStepExecution where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BatchStepExecution where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BatchStepExecution where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BatchStepExecution where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BatchStepExecution where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BatchStepExecution whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BatchStepExecution whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
