/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.Keys;
import org.jooq.generated.ScaleAdvisor;
import org.jooq.generated.tables.records.InvitationRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Invitation extends TableImpl<InvitationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>scale_advisor.INVITATION</code>
     */
    public static final Invitation INVITATION = new Invitation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InvitationRecord> getRecordType() {
        return InvitationRecord.class;
    }

    /**
     * The column <code>scale_advisor.INVITATION.INVITATION_TOKEN</code>.
     */
    public final TableField<InvitationRecord, String> INVITATION_TOKEN = createField(DSL.name("INVITATION_TOKEN"), SQLDataType.CHAR(50).nullable(false), this, "");

    /**
     * The column <code>scale_advisor.INVITATION.PROJECT_ID</code>.
     */
    public final TableField<InvitationRecord, Long> PROJECT_ID = createField(DSL.name("PROJECT_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>scale_advisor.INVITATION.EXPIRE_DATE</code>.
     */
    public final TableField<InvitationRecord, LocalDateTime> EXPIRE_DATE = createField(DSL.name("EXPIRE_DATE"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    private Invitation(Name alias, Table<InvitationRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Invitation(Name alias, Table<InvitationRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>scale_advisor.INVITATION</code> table reference
     */
    public Invitation(String alias) {
        this(DSL.name(alias), INVITATION);
    }

    /**
     * Create an aliased <code>scale_advisor.INVITATION</code> table reference
     */
    public Invitation(Name alias) {
        this(alias, INVITATION);
    }

    /**
     * Create a <code>scale_advisor.INVITATION</code> table reference
     */
    public Invitation() {
        this(DSL.name("INVITATION"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ScaleAdvisor.SCALE_ADVISOR;
    }

    @Override
    public UniqueKey<InvitationRecord> getPrimaryKey() {
        return Keys.KEY_INVITATION_PRIMARY;
    }

    @Override
    public Invitation as(String alias) {
        return new Invitation(DSL.name(alias), this);
    }

    @Override
    public Invitation as(Name alias) {
        return new Invitation(alias, this);
    }

    @Override
    public Invitation as(Table<?> alias) {
        return new Invitation(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Invitation rename(String name) {
        return new Invitation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Invitation rename(Name name) {
        return new Invitation(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Invitation rename(Table<?> name) {
        return new Invitation(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Invitation where(Condition condition) {
        return new Invitation(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Invitation where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Invitation where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Invitation where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Invitation where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Invitation where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Invitation where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Invitation where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Invitation whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Invitation whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
