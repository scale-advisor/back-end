/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.Keys;
import org.jooq.generated.ScaleAdvisor;
import org.jooq.generated.tables.Project.ProjectPath;
import org.jooq.generated.tables.Version.VersionPath;
import org.jooq.generated.tables.records.FileRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class File extends TableImpl<FileRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>scale_advisor.FILE</code>
     */
    public static final File FILE = new File();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FileRecord> getRecordType() {
        return FileRecord.class;
    }

    /**
     * The column <code>scale_advisor.FILE.FILE_ID</code>.
     */
    public final TableField<FileRecord, Long> FILE_ID = createField(DSL.name("FILE_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>scale_advisor.FILE.PROJECT_ID</code>.
     */
    public final TableField<FileRecord, Long> PROJECT_ID = createField(DSL.name("PROJECT_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>scale_advisor.FILE.VERSION_NUMBER</code>.
     */
    public final TableField<FileRecord, String> VERSION_NUMBER = createField(DSL.name("VERSION_NUMBER"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>scale_advisor.FILE.TYPE</code>.
     */
    public final TableField<FileRecord, String> TYPE = createField(DSL.name("TYPE"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>scale_advisor.FILE.NAME</code>.
     */
    public final TableField<FileRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>scale_advisor.FILE.UPLOADER_ID</code>.
     */
    public final TableField<FileRecord, Long> UPLOADER_ID = createField(DSL.name("UPLOADER_ID"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>scale_advisor.FILE.PATH</code>.
     */
    public final TableField<FileRecord, String> PATH = createField(DSL.name("PATH"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>scale_advisor.FILE.EXTENSION</code>.
     */
    public final TableField<FileRecord, String> EXTENSION = createField(DSL.name("EXTENSION"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>scale_advisor.FILE.CREATED_AT</code>.
     */
    public final TableField<FileRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>scale_advisor.FILE.UPDATED_AT</code>.
     */
    public final TableField<FileRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    private File(Name alias, Table<FileRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private File(Name alias, Table<FileRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>scale_advisor.FILE</code> table reference
     */
    public File(String alias) {
        this(DSL.name(alias), FILE);
    }

    /**
     * Create an aliased <code>scale_advisor.FILE</code> table reference
     */
    public File(Name alias) {
        this(alias, FILE);
    }

    /**
     * Create a <code>scale_advisor.FILE</code> table reference
     */
    public File() {
        this(DSL.name("FILE"), null);
    }

    public <O extends Record> File(Table<O> path, ForeignKey<O, FileRecord> childPath, InverseForeignKey<O, FileRecord> parentPath) {
        super(path, childPath, parentPath, FILE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class FilePath extends File implements Path<FileRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> FilePath(Table<O> path, ForeignKey<O, FileRecord> childPath, InverseForeignKey<O, FileRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private FilePath(Name alias, Table<FileRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public FilePath as(String alias) {
            return new FilePath(DSL.name(alias), this);
        }

        @Override
        public FilePath as(Name alias) {
            return new FilePath(alias, this);
        }

        @Override
        public FilePath as(Table<?> alias) {
            return new FilePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ScaleAdvisor.SCALE_ADVISOR;
    }

    @Override
    public UniqueKey<FileRecord> getPrimaryKey() {
        return Keys.KEY_FILE_PRIMARY;
    }

    @Override
    public List<UniqueKey<FileRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_FILE_UK_FILE_PROJECT_VERSION);
    }

    @Override
    public List<ForeignKey<FileRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_FILE_PROJECT_ID, Keys.FK_FILE_VERSION);
    }

    private transient ProjectPath _project;

    /**
     * Get the implicit join path to the <code>scale_advisor.PROJECT</code>
     * table.
     */
    public ProjectPath project() {
        if (_project == null)
            _project = new ProjectPath(this, Keys.FK_FILE_PROJECT_ID, null);

        return _project;
    }

    private transient VersionPath _version;

    /**
     * Get the implicit join path to the <code>scale_advisor.VERSION</code>
     * table.
     */
    public VersionPath version() {
        if (_version == null)
            _version = new VersionPath(this, Keys.FK_FILE_VERSION, null);

        return _version;
    }

    @Override
    public File as(String alias) {
        return new File(DSL.name(alias), this);
    }

    @Override
    public File as(Name alias) {
        return new File(alias, this);
    }

    @Override
    public File as(Table<?> alias) {
        return new File(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public File rename(String name) {
        return new File(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public File rename(Name name) {
        return new File(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public File rename(Table<?> name) {
        return new File(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public File where(Condition condition) {
        return new File(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public File where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public File where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public File where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public File where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public File where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public File where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public File where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public File whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public File whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
