/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.Keys;
import org.jooq.generated.ScaleAdvisor;
import org.jooq.generated.tables.Version.VersionPath;
import org.jooq.generated.tables.records.RequirementCategoryRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RequirementCategory extends TableImpl<RequirementCategoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>scale_advisor.REQUIREMENT_CATEGORY</code>
     */
    public static final RequirementCategory REQUIREMENT_CATEGORY = new RequirementCategory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RequirementCategoryRecord> getRecordType() {
        return RequirementCategoryRecord.class;
    }

    /**
     * The column
     * <code>scale_advisor.REQUIREMENT_CATEGORY.REQUIREMENT_CATEGORY_ID</code>.
     */
    public final TableField<RequirementCategoryRecord, Long> REQUIREMENT_CATEGORY_ID = createField(DSL.name("REQUIREMENT_CATEGORY_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>scale_advisor.REQUIREMENT_CATEGORY.PROJECT_ID</code>.
     */
    public final TableField<RequirementCategoryRecord, Long> PROJECT_ID = createField(DSL.name("PROJECT_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>scale_advisor.REQUIREMENT_CATEGORY.VERSION_MAJOR_NUMBER</code>.
     */
    public final TableField<RequirementCategoryRecord, Integer> VERSION_MAJOR_NUMBER = createField(DSL.name("VERSION_MAJOR_NUMBER"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column
     * <code>scale_advisor.REQUIREMENT_CATEGORY.VERSION_MINOR_NUMBER</code>.
     */
    public final TableField<RequirementCategoryRecord, Integer> VERSION_MINOR_NUMBER = createField(DSL.name("VERSION_MINOR_NUMBER"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column
     * <code>scale_advisor.REQUIREMENT_CATEGORY.REQUIREMENT_CATEGORY_NAME</code>.
     */
    public final TableField<RequirementCategoryRecord, String> REQUIREMENT_CATEGORY_NAME = createField(DSL.name("REQUIREMENT_CATEGORY_NAME"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column
     * <code>scale_advisor.REQUIREMENT_CATEGORY.REQUIREMENT_CATEGORY_PREFIX</code>.
     */
    public final TableField<RequirementCategoryRecord, String> REQUIREMENT_CATEGORY_PREFIX = createField(DSL.name("REQUIREMENT_CATEGORY_PREFIX"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>scale_advisor.REQUIREMENT_CATEGORY.CREATED_AT</code>.
     */
    public final TableField<RequirementCategoryRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>scale_advisor.REQUIREMENT_CATEGORY.UPDATED_AT</code>.
     */
    public final TableField<RequirementCategoryRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    private RequirementCategory(Name alias, Table<RequirementCategoryRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private RequirementCategory(Name alias, Table<RequirementCategoryRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>scale_advisor.REQUIREMENT_CATEGORY</code> table
     * reference
     */
    public RequirementCategory(String alias) {
        this(DSL.name(alias), REQUIREMENT_CATEGORY);
    }

    /**
     * Create an aliased <code>scale_advisor.REQUIREMENT_CATEGORY</code> table
     * reference
     */
    public RequirementCategory(Name alias) {
        this(alias, REQUIREMENT_CATEGORY);
    }

    /**
     * Create a <code>scale_advisor.REQUIREMENT_CATEGORY</code> table reference
     */
    public RequirementCategory() {
        this(DSL.name("REQUIREMENT_CATEGORY"), null);
    }

    public <O extends Record> RequirementCategory(Table<O> path, ForeignKey<O, RequirementCategoryRecord> childPath, InverseForeignKey<O, RequirementCategoryRecord> parentPath) {
        super(path, childPath, parentPath, REQUIREMENT_CATEGORY);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class RequirementCategoryPath extends RequirementCategory implements Path<RequirementCategoryRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> RequirementCategoryPath(Table<O> path, ForeignKey<O, RequirementCategoryRecord> childPath, InverseForeignKey<O, RequirementCategoryRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private RequirementCategoryPath(Name alias, Table<RequirementCategoryRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public RequirementCategoryPath as(String alias) {
            return new RequirementCategoryPath(DSL.name(alias), this);
        }

        @Override
        public RequirementCategoryPath as(Name alias) {
            return new RequirementCategoryPath(alias, this);
        }

        @Override
        public RequirementCategoryPath as(Table<?> alias) {
            return new RequirementCategoryPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ScaleAdvisor.SCALE_ADVISOR;
    }

    @Override
    public UniqueKey<RequirementCategoryRecord> getPrimaryKey() {
        return Keys.KEY_REQUIREMENT_CATEGORY_PRIMARY;
    }

    @Override
    public List<ForeignKey<RequirementCategoryRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_REQUIREMENT_CATEGORY_VERSION);
    }

    private transient VersionPath _version;

    /**
     * Get the implicit join path to the <code>scale_advisor.VERSION</code>
     * table.
     */
    public VersionPath version() {
        if (_version == null)
            _version = new VersionPath(this, Keys.FK_REQUIREMENT_CATEGORY_VERSION, null);

        return _version;
    }

    @Override
    public RequirementCategory as(String alias) {
        return new RequirementCategory(DSL.name(alias), this);
    }

    @Override
    public RequirementCategory as(Name alias) {
        return new RequirementCategory(alias, this);
    }

    @Override
    public RequirementCategory as(Table<?> alias) {
        return new RequirementCategory(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public RequirementCategory rename(String name) {
        return new RequirementCategory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RequirementCategory rename(Name name) {
        return new RequirementCategory(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public RequirementCategory rename(Table<?> name) {
        return new RequirementCategory(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RequirementCategory where(Condition condition) {
        return new RequirementCategory(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RequirementCategory where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RequirementCategory where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RequirementCategory where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RequirementCategory where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RequirementCategory where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RequirementCategory where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RequirementCategory where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RequirementCategory whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RequirementCategory whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
