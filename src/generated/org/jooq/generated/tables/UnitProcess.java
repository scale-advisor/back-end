/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.Keys;
import org.jooq.generated.ScaleAdvisor;
import org.jooq.generated.tables.records.UnitProcessRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UnitProcess extends TableImpl<UnitProcessRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>scale_advisor.UNIT_PROCESS</code>
     */
    public static final UnitProcess UNIT_PROCESS = new UnitProcess();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UnitProcessRecord> getRecordType() {
        return UnitProcessRecord.class;
    }

    /**
     * The column <code>scale_advisor.UNIT_PROCESS.UNIT_PROCESS_ID</code>.
     */
    public final TableField<UnitProcessRecord, Long> UNIT_PROCESS_ID = createField(DSL.name("UNIT_PROCESS_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>scale_advisor.UNIT_PROCESS.UNIT_PROCESS_NAME</code>.
     */
    public final TableField<UnitProcessRecord, String> UNIT_PROCESS_NAME = createField(DSL.name("UNIT_PROCESS_NAME"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>scale_advisor.UNIT_PROCESS.FUNCTION_TYPE</code>.
     */
    public final TableField<UnitProcessRecord, String> FUNCTION_TYPE = createField(DSL.name("FUNCTION_TYPE"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>scale_advisor.UNIT_PROCESS.CREATED_AT</code>.
     */
    public final TableField<UnitProcessRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>scale_advisor.UNIT_PROCESS.UPDATED_AT</code>.
     */
    public final TableField<UnitProcessRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>scale_advisor.UNIT_PROCESS.IS_AMBIGUOUS</code>.
     */
    public final TableField<UnitProcessRecord, Byte> IS_AMBIGUOUS = createField(DSL.name("IS_AMBIGUOUS"), SQLDataType.TINYINT, this, "");

    private UnitProcess(Name alias, Table<UnitProcessRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private UnitProcess(Name alias, Table<UnitProcessRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>scale_advisor.UNIT_PROCESS</code> table reference
     */
    public UnitProcess(String alias) {
        this(DSL.name(alias), UNIT_PROCESS);
    }

    /**
     * Create an aliased <code>scale_advisor.UNIT_PROCESS</code> table reference
     */
    public UnitProcess(Name alias) {
        this(alias, UNIT_PROCESS);
    }

    /**
     * Create a <code>scale_advisor.UNIT_PROCESS</code> table reference
     */
    public UnitProcess() {
        this(DSL.name("UNIT_PROCESS"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ScaleAdvisor.SCALE_ADVISOR;
    }

    @Override
    public UniqueKey<UnitProcessRecord> getPrimaryKey() {
        return Keys.KEY_UNIT_PROCESS_PRIMARY;
    }

    @Override
    public UnitProcess as(String alias) {
        return new UnitProcess(DSL.name(alias), this);
    }

    @Override
    public UnitProcess as(Name alias) {
        return new UnitProcess(alias, this);
    }

    @Override
    public UnitProcess as(Table<?> alias) {
        return new UnitProcess(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UnitProcess rename(String name) {
        return new UnitProcess(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UnitProcess rename(Name name) {
        return new UnitProcess(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UnitProcess rename(Table<?> name) {
        return new UnitProcess(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UnitProcess where(Condition condition) {
        return new UnitProcess(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UnitProcess where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UnitProcess where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UnitProcess where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UnitProcess where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UnitProcess where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UnitProcess where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UnitProcess where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UnitProcess whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UnitProcess whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
