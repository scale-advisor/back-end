/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.pojos;


import java.io.Serializable;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BatchJobExecutionContext implements Serializable {

    private static final long serialVersionUID = 1L;

    private Long jobExecutionId;
    private String shortContext;
    private String serializedContext;

    public BatchJobExecutionContext() {}

    public BatchJobExecutionContext(BatchJobExecutionContext value) {
        this.jobExecutionId = value.jobExecutionId;
        this.shortContext = value.shortContext;
        this.serializedContext = value.serializedContext;
    }

    public BatchJobExecutionContext(
        Long jobExecutionId,
        String shortContext,
        String serializedContext
    ) {
        this.jobExecutionId = jobExecutionId;
        this.shortContext = shortContext;
        this.serializedContext = serializedContext;
    }

    /**
     * Getter for
     * <code>scale_advisor.BATCH_JOB_EXECUTION_CONTEXT.JOB_EXECUTION_ID</code>.
     */
    public Long getJobExecutionId() {
        return this.jobExecutionId;
    }

    /**
     * Setter for
     * <code>scale_advisor.BATCH_JOB_EXECUTION_CONTEXT.JOB_EXECUTION_ID</code>.
     */
    public BatchJobExecutionContext setJobExecutionId(Long jobExecutionId) {
        this.jobExecutionId = jobExecutionId;
        return this;
    }

    /**
     * Getter for
     * <code>scale_advisor.BATCH_JOB_EXECUTION_CONTEXT.SHORT_CONTEXT</code>.
     */
    public String getShortContext() {
        return this.shortContext;
    }

    /**
     * Setter for
     * <code>scale_advisor.BATCH_JOB_EXECUTION_CONTEXT.SHORT_CONTEXT</code>.
     */
    public BatchJobExecutionContext setShortContext(String shortContext) {
        this.shortContext = shortContext;
        return this;
    }

    /**
     * Getter for
     * <code>scale_advisor.BATCH_JOB_EXECUTION_CONTEXT.SERIALIZED_CONTEXT</code>.
     */
    public String getSerializedContext() {
        return this.serializedContext;
    }

    /**
     * Setter for
     * <code>scale_advisor.BATCH_JOB_EXECUTION_CONTEXT.SERIALIZED_CONTEXT</code>.
     */
    public BatchJobExecutionContext setSerializedContext(String serializedContext) {
        this.serializedContext = serializedContext;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final BatchJobExecutionContext other = (BatchJobExecutionContext) obj;
        if (this.jobExecutionId == null) {
            if (other.jobExecutionId != null)
                return false;
        }
        else if (!this.jobExecutionId.equals(other.jobExecutionId))
            return false;
        if (this.shortContext == null) {
            if (other.shortContext != null)
                return false;
        }
        else if (!this.shortContext.equals(other.shortContext))
            return false;
        if (this.serializedContext == null) {
            if (other.serializedContext != null)
                return false;
        }
        else if (!this.serializedContext.equals(other.serializedContext))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.jobExecutionId == null) ? 0 : this.jobExecutionId.hashCode());
        result = prime * result + ((this.shortContext == null) ? 0 : this.shortContext.hashCode());
        result = prime * result + ((this.serializedContext == null) ? 0 : this.serializedContext.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("BatchJobExecutionContext (");

        sb.append(jobExecutionId);
        sb.append(", ").append(shortContext);
        sb.append(", ").append(serializedContext);

        sb.append(")");
        return sb.toString();
    }
}
