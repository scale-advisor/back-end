/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.pojos;


import java.io.Serializable;
import java.time.LocalDateTime;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Version implements Serializable {

    private static final long serialVersionUID = 1L;

    private Long projectId;
    private Integer versionMajorNumber;
    private Integer versionMinorNumber;
    private LocalDateTime createdAt;

    public Version() {}

    public Version(Version value) {
        this.projectId = value.projectId;
        this.versionMajorNumber = value.versionMajorNumber;
        this.versionMinorNumber = value.versionMinorNumber;
        this.createdAt = value.createdAt;
    }

    public Version(
        Long projectId,
        Integer versionMajorNumber,
        Integer versionMinorNumber,
        LocalDateTime createdAt
    ) {
        this.projectId = projectId;
        this.versionMajorNumber = versionMajorNumber;
        this.versionMinorNumber = versionMinorNumber;
        this.createdAt = createdAt;
    }

    /**
     * Getter for <code>scale_advisor.VERSION.PROJECT_ID</code>.
     */
    public Long getProjectId() {
        return this.projectId;
    }

    /**
     * Setter for <code>scale_advisor.VERSION.PROJECT_ID</code>.
     */
    public Version setProjectId(Long projectId) {
        this.projectId = projectId;
        return this;
    }

    /**
     * Getter for <code>scale_advisor.VERSION.VERSION_MAJOR_NUMBER</code>.
     */
    public Integer getVersionMajorNumber() {
        return this.versionMajorNumber;
    }

    /**
     * Setter for <code>scale_advisor.VERSION.VERSION_MAJOR_NUMBER</code>.
     */
    public Version setVersionMajorNumber(Integer versionMajorNumber) {
        this.versionMajorNumber = versionMajorNumber;
        return this;
    }

    /**
     * Getter for <code>scale_advisor.VERSION.VERSION_MINOR_NUMBER</code>.
     */
    public Integer getVersionMinorNumber() {
        return this.versionMinorNumber;
    }

    /**
     * Setter for <code>scale_advisor.VERSION.VERSION_MINOR_NUMBER</code>.
     */
    public Version setVersionMinorNumber(Integer versionMinorNumber) {
        this.versionMinorNumber = versionMinorNumber;
        return this;
    }

    /**
     * Getter for <code>scale_advisor.VERSION.CREATED_AT</code>.
     */
    public LocalDateTime getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Setter for <code>scale_advisor.VERSION.CREATED_AT</code>.
     */
    public Version setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Version other = (Version) obj;
        if (this.projectId == null) {
            if (other.projectId != null)
                return false;
        }
        else if (!this.projectId.equals(other.projectId))
            return false;
        if (this.versionMajorNumber == null) {
            if (other.versionMajorNumber != null)
                return false;
        }
        else if (!this.versionMajorNumber.equals(other.versionMajorNumber))
            return false;
        if (this.versionMinorNumber == null) {
            if (other.versionMinorNumber != null)
                return false;
        }
        else if (!this.versionMinorNumber.equals(other.versionMinorNumber))
            return false;
        if (this.createdAt == null) {
            if (other.createdAt != null)
                return false;
        }
        else if (!this.createdAt.equals(other.createdAt))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.projectId == null) ? 0 : this.projectId.hashCode());
        result = prime * result + ((this.versionMajorNumber == null) ? 0 : this.versionMajorNumber.hashCode());
        result = prime * result + ((this.versionMinorNumber == null) ? 0 : this.versionMinorNumber.hashCode());
        result = prime * result + ((this.createdAt == null) ? 0 : this.createdAt.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Version (");

        sb.append(projectId);
        sb.append(", ").append(versionMajorNumber);
        sb.append(", ").append(versionMinorNumber);
        sb.append(", ").append(createdAt);

        sb.append(")");
        return sb.toString();
    }
}
