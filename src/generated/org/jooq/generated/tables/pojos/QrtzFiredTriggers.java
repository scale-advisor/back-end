/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.pojos;


import java.io.Serializable;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class QrtzFiredTriggers implements Serializable {

    private static final long serialVersionUID = 1L;

    private String schedName;
    private String entryId;
    private String triggerName;
    private String triggerGroup;
    private String instanceName;
    private Long firedTime;
    private Long schedTime;
    private Integer priority;
    private String state;
    private String jobName;
    private String jobGroup;
    private String isNonconcurrent;
    private String requestsRecovery;

    public QrtzFiredTriggers() {}

    public QrtzFiredTriggers(QrtzFiredTriggers value) {
        this.schedName = value.schedName;
        this.entryId = value.entryId;
        this.triggerName = value.triggerName;
        this.triggerGroup = value.triggerGroup;
        this.instanceName = value.instanceName;
        this.firedTime = value.firedTime;
        this.schedTime = value.schedTime;
        this.priority = value.priority;
        this.state = value.state;
        this.jobName = value.jobName;
        this.jobGroup = value.jobGroup;
        this.isNonconcurrent = value.isNonconcurrent;
        this.requestsRecovery = value.requestsRecovery;
    }

    public QrtzFiredTriggers(
        String schedName,
        String entryId,
        String triggerName,
        String triggerGroup,
        String instanceName,
        Long firedTime,
        Long schedTime,
        Integer priority,
        String state,
        String jobName,
        String jobGroup,
        String isNonconcurrent,
        String requestsRecovery
    ) {
        this.schedName = schedName;
        this.entryId = entryId;
        this.triggerName = triggerName;
        this.triggerGroup = triggerGroup;
        this.instanceName = instanceName;
        this.firedTime = firedTime;
        this.schedTime = schedTime;
        this.priority = priority;
        this.state = state;
        this.jobName = jobName;
        this.jobGroup = jobGroup;
        this.isNonconcurrent = isNonconcurrent;
        this.requestsRecovery = requestsRecovery;
    }

    /**
     * Getter for <code>scale_advisor.QRTZ_FIRED_TRIGGERS.SCHED_NAME</code>.
     */
    public String getSchedName() {
        return this.schedName;
    }

    /**
     * Setter for <code>scale_advisor.QRTZ_FIRED_TRIGGERS.SCHED_NAME</code>.
     */
    public QrtzFiredTriggers setSchedName(String schedName) {
        this.schedName = schedName;
        return this;
    }

    /**
     * Getter for <code>scale_advisor.QRTZ_FIRED_TRIGGERS.ENTRY_ID</code>.
     */
    public String getEntryId() {
        return this.entryId;
    }

    /**
     * Setter for <code>scale_advisor.QRTZ_FIRED_TRIGGERS.ENTRY_ID</code>.
     */
    public QrtzFiredTriggers setEntryId(String entryId) {
        this.entryId = entryId;
        return this;
    }

    /**
     * Getter for <code>scale_advisor.QRTZ_FIRED_TRIGGERS.TRIGGER_NAME</code>.
     */
    public String getTriggerName() {
        return this.triggerName;
    }

    /**
     * Setter for <code>scale_advisor.QRTZ_FIRED_TRIGGERS.TRIGGER_NAME</code>.
     */
    public QrtzFiredTriggers setTriggerName(String triggerName) {
        this.triggerName = triggerName;
        return this;
    }

    /**
     * Getter for <code>scale_advisor.QRTZ_FIRED_TRIGGERS.TRIGGER_GROUP</code>.
     */
    public String getTriggerGroup() {
        return this.triggerGroup;
    }

    /**
     * Setter for <code>scale_advisor.QRTZ_FIRED_TRIGGERS.TRIGGER_GROUP</code>.
     */
    public QrtzFiredTriggers setTriggerGroup(String triggerGroup) {
        this.triggerGroup = triggerGroup;
        return this;
    }

    /**
     * Getter for <code>scale_advisor.QRTZ_FIRED_TRIGGERS.INSTANCE_NAME</code>.
     */
    public String getInstanceName() {
        return this.instanceName;
    }

    /**
     * Setter for <code>scale_advisor.QRTZ_FIRED_TRIGGERS.INSTANCE_NAME</code>.
     */
    public QrtzFiredTriggers setInstanceName(String instanceName) {
        this.instanceName = instanceName;
        return this;
    }

    /**
     * Getter for <code>scale_advisor.QRTZ_FIRED_TRIGGERS.FIRED_TIME</code>.
     */
    public Long getFiredTime() {
        return this.firedTime;
    }

    /**
     * Setter for <code>scale_advisor.QRTZ_FIRED_TRIGGERS.FIRED_TIME</code>.
     */
    public QrtzFiredTriggers setFiredTime(Long firedTime) {
        this.firedTime = firedTime;
        return this;
    }

    /**
     * Getter for <code>scale_advisor.QRTZ_FIRED_TRIGGERS.SCHED_TIME</code>.
     */
    public Long getSchedTime() {
        return this.schedTime;
    }

    /**
     * Setter for <code>scale_advisor.QRTZ_FIRED_TRIGGERS.SCHED_TIME</code>.
     */
    public QrtzFiredTriggers setSchedTime(Long schedTime) {
        this.schedTime = schedTime;
        return this;
    }

    /**
     * Getter for <code>scale_advisor.QRTZ_FIRED_TRIGGERS.PRIORITY</code>.
     */
    public Integer getPriority() {
        return this.priority;
    }

    /**
     * Setter for <code>scale_advisor.QRTZ_FIRED_TRIGGERS.PRIORITY</code>.
     */
    public QrtzFiredTriggers setPriority(Integer priority) {
        this.priority = priority;
        return this;
    }

    /**
     * Getter for <code>scale_advisor.QRTZ_FIRED_TRIGGERS.STATE</code>.
     */
    public String getState() {
        return this.state;
    }

    /**
     * Setter for <code>scale_advisor.QRTZ_FIRED_TRIGGERS.STATE</code>.
     */
    public QrtzFiredTriggers setState(String state) {
        this.state = state;
        return this;
    }

    /**
     * Getter for <code>scale_advisor.QRTZ_FIRED_TRIGGERS.JOB_NAME</code>.
     */
    public String getJobName() {
        return this.jobName;
    }

    /**
     * Setter for <code>scale_advisor.QRTZ_FIRED_TRIGGERS.JOB_NAME</code>.
     */
    public QrtzFiredTriggers setJobName(String jobName) {
        this.jobName = jobName;
        return this;
    }

    /**
     * Getter for <code>scale_advisor.QRTZ_FIRED_TRIGGERS.JOB_GROUP</code>.
     */
    public String getJobGroup() {
        return this.jobGroup;
    }

    /**
     * Setter for <code>scale_advisor.QRTZ_FIRED_TRIGGERS.JOB_GROUP</code>.
     */
    public QrtzFiredTriggers setJobGroup(String jobGroup) {
        this.jobGroup = jobGroup;
        return this;
    }

    /**
     * Getter for
     * <code>scale_advisor.QRTZ_FIRED_TRIGGERS.IS_NONCONCURRENT</code>.
     */
    public String getIsNonconcurrent() {
        return this.isNonconcurrent;
    }

    /**
     * Setter for
     * <code>scale_advisor.QRTZ_FIRED_TRIGGERS.IS_NONCONCURRENT</code>.
     */
    public QrtzFiredTriggers setIsNonconcurrent(String isNonconcurrent) {
        this.isNonconcurrent = isNonconcurrent;
        return this;
    }

    /**
     * Getter for
     * <code>scale_advisor.QRTZ_FIRED_TRIGGERS.REQUESTS_RECOVERY</code>.
     */
    public String getRequestsRecovery() {
        return this.requestsRecovery;
    }

    /**
     * Setter for
     * <code>scale_advisor.QRTZ_FIRED_TRIGGERS.REQUESTS_RECOVERY</code>.
     */
    public QrtzFiredTriggers setRequestsRecovery(String requestsRecovery) {
        this.requestsRecovery = requestsRecovery;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final QrtzFiredTriggers other = (QrtzFiredTriggers) obj;
        if (this.schedName == null) {
            if (other.schedName != null)
                return false;
        }
        else if (!this.schedName.equals(other.schedName))
            return false;
        if (this.entryId == null) {
            if (other.entryId != null)
                return false;
        }
        else if (!this.entryId.equals(other.entryId))
            return false;
        if (this.triggerName == null) {
            if (other.triggerName != null)
                return false;
        }
        else if (!this.triggerName.equals(other.triggerName))
            return false;
        if (this.triggerGroup == null) {
            if (other.triggerGroup != null)
                return false;
        }
        else if (!this.triggerGroup.equals(other.triggerGroup))
            return false;
        if (this.instanceName == null) {
            if (other.instanceName != null)
                return false;
        }
        else if (!this.instanceName.equals(other.instanceName))
            return false;
        if (this.firedTime == null) {
            if (other.firedTime != null)
                return false;
        }
        else if (!this.firedTime.equals(other.firedTime))
            return false;
        if (this.schedTime == null) {
            if (other.schedTime != null)
                return false;
        }
        else if (!this.schedTime.equals(other.schedTime))
            return false;
        if (this.priority == null) {
            if (other.priority != null)
                return false;
        }
        else if (!this.priority.equals(other.priority))
            return false;
        if (this.state == null) {
            if (other.state != null)
                return false;
        }
        else if (!this.state.equals(other.state))
            return false;
        if (this.jobName == null) {
            if (other.jobName != null)
                return false;
        }
        else if (!this.jobName.equals(other.jobName))
            return false;
        if (this.jobGroup == null) {
            if (other.jobGroup != null)
                return false;
        }
        else if (!this.jobGroup.equals(other.jobGroup))
            return false;
        if (this.isNonconcurrent == null) {
            if (other.isNonconcurrent != null)
                return false;
        }
        else if (!this.isNonconcurrent.equals(other.isNonconcurrent))
            return false;
        if (this.requestsRecovery == null) {
            if (other.requestsRecovery != null)
                return false;
        }
        else if (!this.requestsRecovery.equals(other.requestsRecovery))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.schedName == null) ? 0 : this.schedName.hashCode());
        result = prime * result + ((this.entryId == null) ? 0 : this.entryId.hashCode());
        result = prime * result + ((this.triggerName == null) ? 0 : this.triggerName.hashCode());
        result = prime * result + ((this.triggerGroup == null) ? 0 : this.triggerGroup.hashCode());
        result = prime * result + ((this.instanceName == null) ? 0 : this.instanceName.hashCode());
        result = prime * result + ((this.firedTime == null) ? 0 : this.firedTime.hashCode());
        result = prime * result + ((this.schedTime == null) ? 0 : this.schedTime.hashCode());
        result = prime * result + ((this.priority == null) ? 0 : this.priority.hashCode());
        result = prime * result + ((this.state == null) ? 0 : this.state.hashCode());
        result = prime * result + ((this.jobName == null) ? 0 : this.jobName.hashCode());
        result = prime * result + ((this.jobGroup == null) ? 0 : this.jobGroup.hashCode());
        result = prime * result + ((this.isNonconcurrent == null) ? 0 : this.isNonconcurrent.hashCode());
        result = prime * result + ((this.requestsRecovery == null) ? 0 : this.requestsRecovery.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("QrtzFiredTriggers (");

        sb.append(schedName);
        sb.append(", ").append(entryId);
        sb.append(", ").append(triggerName);
        sb.append(", ").append(triggerGroup);
        sb.append(", ").append(instanceName);
        sb.append(", ").append(firedTime);
        sb.append(", ").append(schedTime);
        sb.append(", ").append(priority);
        sb.append(", ").append(state);
        sb.append(", ").append(jobName);
        sb.append(", ").append(jobGroup);
        sb.append(", ").append(isNonconcurrent);
        sb.append(", ").append(requestsRecovery);

        sb.append(")");
        return sb.toString();
    }
}
