/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.pojos;


import java.io.Serializable;
import java.util.Arrays;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class QrtzTriggers implements Serializable {

    private static final long serialVersionUID = 1L;

    private String schedName;
    private String triggerName;
    private String triggerGroup;
    private String jobName;
    private String jobGroup;
    private String description;
    private Long nextFireTime;
    private Long prevFireTime;
    private Integer priority;
    private String triggerState;
    private String triggerType;
    private Long startTime;
    private Long endTime;
    private String calendarName;
    private Short misfireInstr;
    private byte[] jobData;

    public QrtzTriggers() {}

    public QrtzTriggers(QrtzTriggers value) {
        this.schedName = value.schedName;
        this.triggerName = value.triggerName;
        this.triggerGroup = value.triggerGroup;
        this.jobName = value.jobName;
        this.jobGroup = value.jobGroup;
        this.description = value.description;
        this.nextFireTime = value.nextFireTime;
        this.prevFireTime = value.prevFireTime;
        this.priority = value.priority;
        this.triggerState = value.triggerState;
        this.triggerType = value.triggerType;
        this.startTime = value.startTime;
        this.endTime = value.endTime;
        this.calendarName = value.calendarName;
        this.misfireInstr = value.misfireInstr;
        this.jobData = value.jobData;
    }

    public QrtzTriggers(
        String schedName,
        String triggerName,
        String triggerGroup,
        String jobName,
        String jobGroup,
        String description,
        Long nextFireTime,
        Long prevFireTime,
        Integer priority,
        String triggerState,
        String triggerType,
        Long startTime,
        Long endTime,
        String calendarName,
        Short misfireInstr,
        byte[] jobData
    ) {
        this.schedName = schedName;
        this.triggerName = triggerName;
        this.triggerGroup = triggerGroup;
        this.jobName = jobName;
        this.jobGroup = jobGroup;
        this.description = description;
        this.nextFireTime = nextFireTime;
        this.prevFireTime = prevFireTime;
        this.priority = priority;
        this.triggerState = triggerState;
        this.triggerType = triggerType;
        this.startTime = startTime;
        this.endTime = endTime;
        this.calendarName = calendarName;
        this.misfireInstr = misfireInstr;
        this.jobData = jobData;
    }

    /**
     * Getter for <code>scale_advisor.QRTZ_TRIGGERS.SCHED_NAME</code>.
     */
    public String getSchedName() {
        return this.schedName;
    }

    /**
     * Setter for <code>scale_advisor.QRTZ_TRIGGERS.SCHED_NAME</code>.
     */
    public QrtzTriggers setSchedName(String schedName) {
        this.schedName = schedName;
        return this;
    }

    /**
     * Getter for <code>scale_advisor.QRTZ_TRIGGERS.TRIGGER_NAME</code>.
     */
    public String getTriggerName() {
        return this.triggerName;
    }

    /**
     * Setter for <code>scale_advisor.QRTZ_TRIGGERS.TRIGGER_NAME</code>.
     */
    public QrtzTriggers setTriggerName(String triggerName) {
        this.triggerName = triggerName;
        return this;
    }

    /**
     * Getter for <code>scale_advisor.QRTZ_TRIGGERS.TRIGGER_GROUP</code>.
     */
    public String getTriggerGroup() {
        return this.triggerGroup;
    }

    /**
     * Setter for <code>scale_advisor.QRTZ_TRIGGERS.TRIGGER_GROUP</code>.
     */
    public QrtzTriggers setTriggerGroup(String triggerGroup) {
        this.triggerGroup = triggerGroup;
        return this;
    }

    /**
     * Getter for <code>scale_advisor.QRTZ_TRIGGERS.JOB_NAME</code>.
     */
    public String getJobName() {
        return this.jobName;
    }

    /**
     * Setter for <code>scale_advisor.QRTZ_TRIGGERS.JOB_NAME</code>.
     */
    public QrtzTriggers setJobName(String jobName) {
        this.jobName = jobName;
        return this;
    }

    /**
     * Getter for <code>scale_advisor.QRTZ_TRIGGERS.JOB_GROUP</code>.
     */
    public String getJobGroup() {
        return this.jobGroup;
    }

    /**
     * Setter for <code>scale_advisor.QRTZ_TRIGGERS.JOB_GROUP</code>.
     */
    public QrtzTriggers setJobGroup(String jobGroup) {
        this.jobGroup = jobGroup;
        return this;
    }

    /**
     * Getter for <code>scale_advisor.QRTZ_TRIGGERS.DESCRIPTION</code>.
     */
    public String getDescription() {
        return this.description;
    }

    /**
     * Setter for <code>scale_advisor.QRTZ_TRIGGERS.DESCRIPTION</code>.
     */
    public QrtzTriggers setDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Getter for <code>scale_advisor.QRTZ_TRIGGERS.NEXT_FIRE_TIME</code>.
     */
    public Long getNextFireTime() {
        return this.nextFireTime;
    }

    /**
     * Setter for <code>scale_advisor.QRTZ_TRIGGERS.NEXT_FIRE_TIME</code>.
     */
    public QrtzTriggers setNextFireTime(Long nextFireTime) {
        this.nextFireTime = nextFireTime;
        return this;
    }

    /**
     * Getter for <code>scale_advisor.QRTZ_TRIGGERS.PREV_FIRE_TIME</code>.
     */
    public Long getPrevFireTime() {
        return this.prevFireTime;
    }

    /**
     * Setter for <code>scale_advisor.QRTZ_TRIGGERS.PREV_FIRE_TIME</code>.
     */
    public QrtzTriggers setPrevFireTime(Long prevFireTime) {
        this.prevFireTime = prevFireTime;
        return this;
    }

    /**
     * Getter for <code>scale_advisor.QRTZ_TRIGGERS.PRIORITY</code>.
     */
    public Integer getPriority() {
        return this.priority;
    }

    /**
     * Setter for <code>scale_advisor.QRTZ_TRIGGERS.PRIORITY</code>.
     */
    public QrtzTriggers setPriority(Integer priority) {
        this.priority = priority;
        return this;
    }

    /**
     * Getter for <code>scale_advisor.QRTZ_TRIGGERS.TRIGGER_STATE</code>.
     */
    public String getTriggerState() {
        return this.triggerState;
    }

    /**
     * Setter for <code>scale_advisor.QRTZ_TRIGGERS.TRIGGER_STATE</code>.
     */
    public QrtzTriggers setTriggerState(String triggerState) {
        this.triggerState = triggerState;
        return this;
    }

    /**
     * Getter for <code>scale_advisor.QRTZ_TRIGGERS.TRIGGER_TYPE</code>.
     */
    public String getTriggerType() {
        return this.triggerType;
    }

    /**
     * Setter for <code>scale_advisor.QRTZ_TRIGGERS.TRIGGER_TYPE</code>.
     */
    public QrtzTriggers setTriggerType(String triggerType) {
        this.triggerType = triggerType;
        return this;
    }

    /**
     * Getter for <code>scale_advisor.QRTZ_TRIGGERS.START_TIME</code>.
     */
    public Long getStartTime() {
        return this.startTime;
    }

    /**
     * Setter for <code>scale_advisor.QRTZ_TRIGGERS.START_TIME</code>.
     */
    public QrtzTriggers setStartTime(Long startTime) {
        this.startTime = startTime;
        return this;
    }

    /**
     * Getter for <code>scale_advisor.QRTZ_TRIGGERS.END_TIME</code>.
     */
    public Long getEndTime() {
        return this.endTime;
    }

    /**
     * Setter for <code>scale_advisor.QRTZ_TRIGGERS.END_TIME</code>.
     */
    public QrtzTriggers setEndTime(Long endTime) {
        this.endTime = endTime;
        return this;
    }

    /**
     * Getter for <code>scale_advisor.QRTZ_TRIGGERS.CALENDAR_NAME</code>.
     */
    public String getCalendarName() {
        return this.calendarName;
    }

    /**
     * Setter for <code>scale_advisor.QRTZ_TRIGGERS.CALENDAR_NAME</code>.
     */
    public QrtzTriggers setCalendarName(String calendarName) {
        this.calendarName = calendarName;
        return this;
    }

    /**
     * Getter for <code>scale_advisor.QRTZ_TRIGGERS.MISFIRE_INSTR</code>.
     */
    public Short getMisfireInstr() {
        return this.misfireInstr;
    }

    /**
     * Setter for <code>scale_advisor.QRTZ_TRIGGERS.MISFIRE_INSTR</code>.
     */
    public QrtzTriggers setMisfireInstr(Short misfireInstr) {
        this.misfireInstr = misfireInstr;
        return this;
    }

    /**
     * Getter for <code>scale_advisor.QRTZ_TRIGGERS.JOB_DATA</code>.
     */
    public byte[] getJobData() {
        return this.jobData;
    }

    /**
     * Setter for <code>scale_advisor.QRTZ_TRIGGERS.JOB_DATA</code>.
     */
    public QrtzTriggers setJobData(byte[] jobData) {
        this.jobData = jobData;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final QrtzTriggers other = (QrtzTriggers) obj;
        if (this.schedName == null) {
            if (other.schedName != null)
                return false;
        }
        else if (!this.schedName.equals(other.schedName))
            return false;
        if (this.triggerName == null) {
            if (other.triggerName != null)
                return false;
        }
        else if (!this.triggerName.equals(other.triggerName))
            return false;
        if (this.triggerGroup == null) {
            if (other.triggerGroup != null)
                return false;
        }
        else if (!this.triggerGroup.equals(other.triggerGroup))
            return false;
        if (this.jobName == null) {
            if (other.jobName != null)
                return false;
        }
        else if (!this.jobName.equals(other.jobName))
            return false;
        if (this.jobGroup == null) {
            if (other.jobGroup != null)
                return false;
        }
        else if (!this.jobGroup.equals(other.jobGroup))
            return false;
        if (this.description == null) {
            if (other.description != null)
                return false;
        }
        else if (!this.description.equals(other.description))
            return false;
        if (this.nextFireTime == null) {
            if (other.nextFireTime != null)
                return false;
        }
        else if (!this.nextFireTime.equals(other.nextFireTime))
            return false;
        if (this.prevFireTime == null) {
            if (other.prevFireTime != null)
                return false;
        }
        else if (!this.prevFireTime.equals(other.prevFireTime))
            return false;
        if (this.priority == null) {
            if (other.priority != null)
                return false;
        }
        else if (!this.priority.equals(other.priority))
            return false;
        if (this.triggerState == null) {
            if (other.triggerState != null)
                return false;
        }
        else if (!this.triggerState.equals(other.triggerState))
            return false;
        if (this.triggerType == null) {
            if (other.triggerType != null)
                return false;
        }
        else if (!this.triggerType.equals(other.triggerType))
            return false;
        if (this.startTime == null) {
            if (other.startTime != null)
                return false;
        }
        else if (!this.startTime.equals(other.startTime))
            return false;
        if (this.endTime == null) {
            if (other.endTime != null)
                return false;
        }
        else if (!this.endTime.equals(other.endTime))
            return false;
        if (this.calendarName == null) {
            if (other.calendarName != null)
                return false;
        }
        else if (!this.calendarName.equals(other.calendarName))
            return false;
        if (this.misfireInstr == null) {
            if (other.misfireInstr != null)
                return false;
        }
        else if (!this.misfireInstr.equals(other.misfireInstr))
            return false;
        if (this.jobData == null) {
            if (other.jobData != null)
                return false;
        }
        else if (!Arrays.equals(this.jobData, other.jobData))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.schedName == null) ? 0 : this.schedName.hashCode());
        result = prime * result + ((this.triggerName == null) ? 0 : this.triggerName.hashCode());
        result = prime * result + ((this.triggerGroup == null) ? 0 : this.triggerGroup.hashCode());
        result = prime * result + ((this.jobName == null) ? 0 : this.jobName.hashCode());
        result = prime * result + ((this.jobGroup == null) ? 0 : this.jobGroup.hashCode());
        result = prime * result + ((this.description == null) ? 0 : this.description.hashCode());
        result = prime * result + ((this.nextFireTime == null) ? 0 : this.nextFireTime.hashCode());
        result = prime * result + ((this.prevFireTime == null) ? 0 : this.prevFireTime.hashCode());
        result = prime * result + ((this.priority == null) ? 0 : this.priority.hashCode());
        result = prime * result + ((this.triggerState == null) ? 0 : this.triggerState.hashCode());
        result = prime * result + ((this.triggerType == null) ? 0 : this.triggerType.hashCode());
        result = prime * result + ((this.startTime == null) ? 0 : this.startTime.hashCode());
        result = prime * result + ((this.endTime == null) ? 0 : this.endTime.hashCode());
        result = prime * result + ((this.calendarName == null) ? 0 : this.calendarName.hashCode());
        result = prime * result + ((this.misfireInstr == null) ? 0 : this.misfireInstr.hashCode());
        result = prime * result + ((this.jobData == null) ? 0 : Arrays.hashCode(this.jobData));
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("QrtzTriggers (");

        sb.append(schedName);
        sb.append(", ").append(triggerName);
        sb.append(", ").append(triggerGroup);
        sb.append(", ").append(jobName);
        sb.append(", ").append(jobGroup);
        sb.append(", ").append(description);
        sb.append(", ").append(nextFireTime);
        sb.append(", ").append(prevFireTime);
        sb.append(", ").append(priority);
        sb.append(", ").append(triggerState);
        sb.append(", ").append(triggerType);
        sb.append(", ").append(startTime);
        sb.append(", ").append(endTime);
        sb.append(", ").append(calendarName);
        sb.append(", ").append(misfireInstr);
        sb.append(", ").append("[binary...]");

        sb.append(")");
        return sb.toString();
    }
}
