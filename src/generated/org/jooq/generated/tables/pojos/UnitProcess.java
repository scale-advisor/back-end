/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.pojos;


import java.io.Serializable;
import java.time.LocalDateTime;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UnitProcess implements Serializable {

    private static final long serialVersionUID = 1L;

    private Long unitProcessId;
    private String unitProcessName;
    private String functionType;
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;
    private Byte isAmbiguous;

    public UnitProcess() {}

    public UnitProcess(UnitProcess value) {
        this.unitProcessId = value.unitProcessId;
        this.unitProcessName = value.unitProcessName;
        this.functionType = value.functionType;
        this.createdAt = value.createdAt;
        this.updatedAt = value.updatedAt;
        this.isAmbiguous = value.isAmbiguous;
    }

    public UnitProcess(
        Long unitProcessId,
        String unitProcessName,
        String functionType,
        LocalDateTime createdAt,
        LocalDateTime updatedAt,
        Byte isAmbiguous
    ) {
        this.unitProcessId = unitProcessId;
        this.unitProcessName = unitProcessName;
        this.functionType = functionType;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.isAmbiguous = isAmbiguous;
    }

    /**
     * Getter for <code>scale_advisor.UNIT_PROCESS.UNIT_PROCESS_ID</code>.
     */
    public Long getUnitProcessId() {
        return this.unitProcessId;
    }

    /**
     * Setter for <code>scale_advisor.UNIT_PROCESS.UNIT_PROCESS_ID</code>.
     */
    public UnitProcess setUnitProcessId(Long unitProcessId) {
        this.unitProcessId = unitProcessId;
        return this;
    }

    /**
     * Getter for <code>scale_advisor.UNIT_PROCESS.UNIT_PROCESS_NAME</code>.
     */
    public String getUnitProcessName() {
        return this.unitProcessName;
    }

    /**
     * Setter for <code>scale_advisor.UNIT_PROCESS.UNIT_PROCESS_NAME</code>.
     */
    public UnitProcess setUnitProcessName(String unitProcessName) {
        this.unitProcessName = unitProcessName;
        return this;
    }

    /**
     * Getter for <code>scale_advisor.UNIT_PROCESS.FUNCTION_TYPE</code>.
     */
    public String getFunctionType() {
        return this.functionType;
    }

    /**
     * Setter for <code>scale_advisor.UNIT_PROCESS.FUNCTION_TYPE</code>.
     */
    public UnitProcess setFunctionType(String functionType) {
        this.functionType = functionType;
        return this;
    }

    /**
     * Getter for <code>scale_advisor.UNIT_PROCESS.CREATED_AT</code>.
     */
    public LocalDateTime getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Setter for <code>scale_advisor.UNIT_PROCESS.CREATED_AT</code>.
     */
    public UnitProcess setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Getter for <code>scale_advisor.UNIT_PROCESS.UPDATED_AT</code>.
     */
    public LocalDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    /**
     * Setter for <code>scale_advisor.UNIT_PROCESS.UPDATED_AT</code>.
     */
    public UnitProcess setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * Getter for <code>scale_advisor.UNIT_PROCESS.IS_AMBIGUOUS</code>.
     */
    public Byte getIsAmbiguous() {
        return this.isAmbiguous;
    }

    /**
     * Setter for <code>scale_advisor.UNIT_PROCESS.IS_AMBIGUOUS</code>.
     */
    public UnitProcess setIsAmbiguous(Byte isAmbiguous) {
        this.isAmbiguous = isAmbiguous;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final UnitProcess other = (UnitProcess) obj;
        if (this.unitProcessId == null) {
            if (other.unitProcessId != null)
                return false;
        }
        else if (!this.unitProcessId.equals(other.unitProcessId))
            return false;
        if (this.unitProcessName == null) {
            if (other.unitProcessName != null)
                return false;
        }
        else if (!this.unitProcessName.equals(other.unitProcessName))
            return false;
        if (this.functionType == null) {
            if (other.functionType != null)
                return false;
        }
        else if (!this.functionType.equals(other.functionType))
            return false;
        if (this.createdAt == null) {
            if (other.createdAt != null)
                return false;
        }
        else if (!this.createdAt.equals(other.createdAt))
            return false;
        if (this.updatedAt == null) {
            if (other.updatedAt != null)
                return false;
        }
        else if (!this.updatedAt.equals(other.updatedAt))
            return false;
        if (this.isAmbiguous == null) {
            if (other.isAmbiguous != null)
                return false;
        }
        else if (!this.isAmbiguous.equals(other.isAmbiguous))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.unitProcessId == null) ? 0 : this.unitProcessId.hashCode());
        result = prime * result + ((this.unitProcessName == null) ? 0 : this.unitProcessName.hashCode());
        result = prime * result + ((this.functionType == null) ? 0 : this.functionType.hashCode());
        result = prime * result + ((this.createdAt == null) ? 0 : this.createdAt.hashCode());
        result = prime * result + ((this.updatedAt == null) ? 0 : this.updatedAt.hashCode());
        result = prime * result + ((this.isAmbiguous == null) ? 0 : this.isAmbiguous.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("UnitProcess (");

        sb.append(unitProcessId);
        sb.append(", ").append(unitProcessName);
        sb.append(", ").append(functionType);
        sb.append(", ").append(createdAt);
        sb.append(", ").append(updatedAt);
        sb.append(", ").append(isAmbiguous);

        sb.append(")");
        return sb.toString();
    }
}
