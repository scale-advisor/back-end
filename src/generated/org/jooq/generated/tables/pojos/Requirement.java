/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.pojos;


import java.io.Serializable;
import java.time.LocalDateTime;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Requirement implements Serializable {

    private static final long serialVersionUID = 1L;

    private Long requirementId;
    private Long projectId;
    private Integer versionMajorNumber;
    private Integer versionMinorNumber;
    private String requirementNumber;
    private String requirementName;
    private String requirementDetailNumber;
    private String requirementDetail;
    private String requirementType;
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;
    private String note;
    private String requirementDefinition;

    public Requirement() {}

    public Requirement(Requirement value) {
        this.requirementId = value.requirementId;
        this.projectId = value.projectId;
        this.versionMajorNumber = value.versionMajorNumber;
        this.versionMinorNumber = value.versionMinorNumber;
        this.requirementNumber = value.requirementNumber;
        this.requirementName = value.requirementName;
        this.requirementDetailNumber = value.requirementDetailNumber;
        this.requirementDetail = value.requirementDetail;
        this.requirementType = value.requirementType;
        this.createdAt = value.createdAt;
        this.updatedAt = value.updatedAt;
        this.note = value.note;
        this.requirementDefinition = value.requirementDefinition;
    }

    public Requirement(
        Long requirementId,
        Long projectId,
        Integer versionMajorNumber,
        Integer versionMinorNumber,
        String requirementNumber,
        String requirementName,
        String requirementDetailNumber,
        String requirementDetail,
        String requirementType,
        LocalDateTime createdAt,
        LocalDateTime updatedAt,
        String note,
        String requirementDefinition
    ) {
        this.requirementId = requirementId;
        this.projectId = projectId;
        this.versionMajorNumber = versionMajorNumber;
        this.versionMinorNumber = versionMinorNumber;
        this.requirementNumber = requirementNumber;
        this.requirementName = requirementName;
        this.requirementDetailNumber = requirementDetailNumber;
        this.requirementDetail = requirementDetail;
        this.requirementType = requirementType;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.note = note;
        this.requirementDefinition = requirementDefinition;
    }

    /**
     * Getter for <code>scale_advisor.REQUIREMENT.REQUIREMENT_ID</code>.
     */
    public Long getRequirementId() {
        return this.requirementId;
    }

    /**
     * Setter for <code>scale_advisor.REQUIREMENT.REQUIREMENT_ID</code>.
     */
    public Requirement setRequirementId(Long requirementId) {
        this.requirementId = requirementId;
        return this;
    }

    /**
     * Getter for <code>scale_advisor.REQUIREMENT.PROJECT_ID</code>.
     */
    public Long getProjectId() {
        return this.projectId;
    }

    /**
     * Setter for <code>scale_advisor.REQUIREMENT.PROJECT_ID</code>.
     */
    public Requirement setProjectId(Long projectId) {
        this.projectId = projectId;
        return this;
    }

    /**
     * Getter for <code>scale_advisor.REQUIREMENT.VERSION_MAJOR_NUMBER</code>.
     */
    public Integer getVersionMajorNumber() {
        return this.versionMajorNumber;
    }

    /**
     * Setter for <code>scale_advisor.REQUIREMENT.VERSION_MAJOR_NUMBER</code>.
     */
    public Requirement setVersionMajorNumber(Integer versionMajorNumber) {
        this.versionMajorNumber = versionMajorNumber;
        return this;
    }

    /**
     * Getter for <code>scale_advisor.REQUIREMENT.VERSION_MINOR_NUMBER</code>.
     */
    public Integer getVersionMinorNumber() {
        return this.versionMinorNumber;
    }

    /**
     * Setter for <code>scale_advisor.REQUIREMENT.VERSION_MINOR_NUMBER</code>.
     */
    public Requirement setVersionMinorNumber(Integer versionMinorNumber) {
        this.versionMinorNumber = versionMinorNumber;
        return this;
    }

    /**
     * Getter for <code>scale_advisor.REQUIREMENT.REQUIREMENT_NUMBER</code>.
     */
    public String getRequirementNumber() {
        return this.requirementNumber;
    }

    /**
     * Setter for <code>scale_advisor.REQUIREMENT.REQUIREMENT_NUMBER</code>.
     */
    public Requirement setRequirementNumber(String requirementNumber) {
        this.requirementNumber = requirementNumber;
        return this;
    }

    /**
     * Getter for <code>scale_advisor.REQUIREMENT.REQUIREMENT_NAME</code>.
     */
    public String getRequirementName() {
        return this.requirementName;
    }

    /**
     * Setter for <code>scale_advisor.REQUIREMENT.REQUIREMENT_NAME</code>.
     */
    public Requirement setRequirementName(String requirementName) {
        this.requirementName = requirementName;
        return this;
    }

    /**
     * Getter for
     * <code>scale_advisor.REQUIREMENT.REQUIREMENT_DETAIL_NUMBER</code>.
     */
    public String getRequirementDetailNumber() {
        return this.requirementDetailNumber;
    }

    /**
     * Setter for
     * <code>scale_advisor.REQUIREMENT.REQUIREMENT_DETAIL_NUMBER</code>.
     */
    public Requirement setRequirementDetailNumber(String requirementDetailNumber) {
        this.requirementDetailNumber = requirementDetailNumber;
        return this;
    }

    /**
     * Getter for <code>scale_advisor.REQUIREMENT.REQUIREMENT_DETAIL</code>.
     */
    public String getRequirementDetail() {
        return this.requirementDetail;
    }

    /**
     * Setter for <code>scale_advisor.REQUIREMENT.REQUIREMENT_DETAIL</code>.
     */
    public Requirement setRequirementDetail(String requirementDetail) {
        this.requirementDetail = requirementDetail;
        return this;
    }

    /**
     * Getter for <code>scale_advisor.REQUIREMENT.REQUIREMENT_TYPE</code>.
     */
    public String getRequirementType() {
        return this.requirementType;
    }

    /**
     * Setter for <code>scale_advisor.REQUIREMENT.REQUIREMENT_TYPE</code>.
     */
    public Requirement setRequirementType(String requirementType) {
        this.requirementType = requirementType;
        return this;
    }

    /**
     * Getter for <code>scale_advisor.REQUIREMENT.CREATED_AT</code>.
     */
    public LocalDateTime getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Setter for <code>scale_advisor.REQUIREMENT.CREATED_AT</code>.
     */
    public Requirement setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Getter for <code>scale_advisor.REQUIREMENT.UPDATED_AT</code>.
     */
    public LocalDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    /**
     * Setter for <code>scale_advisor.REQUIREMENT.UPDATED_AT</code>.
     */
    public Requirement setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * Getter for <code>scale_advisor.REQUIREMENT.NOTE</code>.
     */
    public String getNote() {
        return this.note;
    }

    /**
     * Setter for <code>scale_advisor.REQUIREMENT.NOTE</code>.
     */
    public Requirement setNote(String note) {
        this.note = note;
        return this;
    }

    /**
     * Getter for <code>scale_advisor.REQUIREMENT.REQUIREMENT_DEFINITION</code>.
     */
    public String getRequirementDefinition() {
        return this.requirementDefinition;
    }

    /**
     * Setter for <code>scale_advisor.REQUIREMENT.REQUIREMENT_DEFINITION</code>.
     */
    public Requirement setRequirementDefinition(String requirementDefinition) {
        this.requirementDefinition = requirementDefinition;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Requirement other = (Requirement) obj;
        if (this.requirementId == null) {
            if (other.requirementId != null)
                return false;
        }
        else if (!this.requirementId.equals(other.requirementId))
            return false;
        if (this.projectId == null) {
            if (other.projectId != null)
                return false;
        }
        else if (!this.projectId.equals(other.projectId))
            return false;
        if (this.versionMajorNumber == null) {
            if (other.versionMajorNumber != null)
                return false;
        }
        else if (!this.versionMajorNumber.equals(other.versionMajorNumber))
            return false;
        if (this.versionMinorNumber == null) {
            if (other.versionMinorNumber != null)
                return false;
        }
        else if (!this.versionMinorNumber.equals(other.versionMinorNumber))
            return false;
        if (this.requirementNumber == null) {
            if (other.requirementNumber != null)
                return false;
        }
        else if (!this.requirementNumber.equals(other.requirementNumber))
            return false;
        if (this.requirementName == null) {
            if (other.requirementName != null)
                return false;
        }
        else if (!this.requirementName.equals(other.requirementName))
            return false;
        if (this.requirementDetailNumber == null) {
            if (other.requirementDetailNumber != null)
                return false;
        }
        else if (!this.requirementDetailNumber.equals(other.requirementDetailNumber))
            return false;
        if (this.requirementDetail == null) {
            if (other.requirementDetail != null)
                return false;
        }
        else if (!this.requirementDetail.equals(other.requirementDetail))
            return false;
        if (this.requirementType == null) {
            if (other.requirementType != null)
                return false;
        }
        else if (!this.requirementType.equals(other.requirementType))
            return false;
        if (this.createdAt == null) {
            if (other.createdAt != null)
                return false;
        }
        else if (!this.createdAt.equals(other.createdAt))
            return false;
        if (this.updatedAt == null) {
            if (other.updatedAt != null)
                return false;
        }
        else if (!this.updatedAt.equals(other.updatedAt))
            return false;
        if (this.note == null) {
            if (other.note != null)
                return false;
        }
        else if (!this.note.equals(other.note))
            return false;
        if (this.requirementDefinition == null) {
            if (other.requirementDefinition != null)
                return false;
        }
        else if (!this.requirementDefinition.equals(other.requirementDefinition))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.requirementId == null) ? 0 : this.requirementId.hashCode());
        result = prime * result + ((this.projectId == null) ? 0 : this.projectId.hashCode());
        result = prime * result + ((this.versionMajorNumber == null) ? 0 : this.versionMajorNumber.hashCode());
        result = prime * result + ((this.versionMinorNumber == null) ? 0 : this.versionMinorNumber.hashCode());
        result = prime * result + ((this.requirementNumber == null) ? 0 : this.requirementNumber.hashCode());
        result = prime * result + ((this.requirementName == null) ? 0 : this.requirementName.hashCode());
        result = prime * result + ((this.requirementDetailNumber == null) ? 0 : this.requirementDetailNumber.hashCode());
        result = prime * result + ((this.requirementDetail == null) ? 0 : this.requirementDetail.hashCode());
        result = prime * result + ((this.requirementType == null) ? 0 : this.requirementType.hashCode());
        result = prime * result + ((this.createdAt == null) ? 0 : this.createdAt.hashCode());
        result = prime * result + ((this.updatedAt == null) ? 0 : this.updatedAt.hashCode());
        result = prime * result + ((this.note == null) ? 0 : this.note.hashCode());
        result = prime * result + ((this.requirementDefinition == null) ? 0 : this.requirementDefinition.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Requirement (");

        sb.append(requirementId);
        sb.append(", ").append(projectId);
        sb.append(", ").append(versionMajorNumber);
        sb.append(", ").append(versionMinorNumber);
        sb.append(", ").append(requirementNumber);
        sb.append(", ").append(requirementName);
        sb.append(", ").append(requirementDetailNumber);
        sb.append(", ").append(requirementDetail);
        sb.append(", ").append(requirementType);
        sb.append(", ").append(createdAt);
        sb.append(", ").append(updatedAt);
        sb.append(", ").append(note);
        sb.append(", ").append(requirementDefinition);

        sb.append(")");
        return sb.toString();
    }
}
