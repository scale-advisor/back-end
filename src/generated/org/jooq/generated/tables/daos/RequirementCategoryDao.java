/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.daos;


import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.generated.tables.RequirementCategory;
import org.jooq.generated.tables.records.RequirementCategoryRecord;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RequirementCategoryDao extends DAOImpl<RequirementCategoryRecord, org.jooq.generated.tables.pojos.RequirementCategory, Long> {

    /**
     * Create a new RequirementCategoryDao without any configuration
     */
    public RequirementCategoryDao() {
        super(RequirementCategory.REQUIREMENT_CATEGORY, org.jooq.generated.tables.pojos.RequirementCategory.class);
    }

    /**
     * Create a new RequirementCategoryDao with an attached configuration
     */
    public RequirementCategoryDao(Configuration configuration) {
        super(RequirementCategory.REQUIREMENT_CATEGORY, org.jooq.generated.tables.pojos.RequirementCategory.class, configuration);
    }

    @Override
    public Long getId(org.jooq.generated.tables.pojos.RequirementCategory object) {
        return object.getRequirementCategoryId();
    }

    /**
     * Fetch records that have <code>REQUIREMENT_CATEGORY_ID BETWEEN
     * lowerInclusive AND upperInclusive</code>
     */
    public List<org.jooq.generated.tables.pojos.RequirementCategory> fetchRangeOfRequirementCategoryId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(RequirementCategory.REQUIREMENT_CATEGORY.REQUIREMENT_CATEGORY_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>REQUIREMENT_CATEGORY_ID IN (values)</code>
     */
    public List<org.jooq.generated.tables.pojos.RequirementCategory> fetchByRequirementCategoryId(Long... values) {
        return fetch(RequirementCategory.REQUIREMENT_CATEGORY.REQUIREMENT_CATEGORY_ID, values);
    }

    /**
     * Fetch a unique record that has <code>REQUIREMENT_CATEGORY_ID =
     * value</code>
     */
    public org.jooq.generated.tables.pojos.RequirementCategory fetchOneByRequirementCategoryId(Long value) {
        return fetchOne(RequirementCategory.REQUIREMENT_CATEGORY.REQUIREMENT_CATEGORY_ID, value);
    }

    /**
     * Fetch a unique record that has <code>REQUIREMENT_CATEGORY_ID =
     * value</code>
     */
    public Optional<org.jooq.generated.tables.pojos.RequirementCategory> fetchOptionalByRequirementCategoryId(Long value) {
        return fetchOptional(RequirementCategory.REQUIREMENT_CATEGORY.REQUIREMENT_CATEGORY_ID, value);
    }

    /**
     * Fetch records that have <code>PROJECT_ID BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.jooq.generated.tables.pojos.RequirementCategory> fetchRangeOfProjectId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(RequirementCategory.REQUIREMENT_CATEGORY.PROJECT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>PROJECT_ID IN (values)</code>
     */
    public List<org.jooq.generated.tables.pojos.RequirementCategory> fetchByProjectId(Long... values) {
        return fetch(RequirementCategory.REQUIREMENT_CATEGORY.PROJECT_ID, values);
    }

    /**
     * Fetch records that have <code>VERSION_MAJOR_NUMBER BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<org.jooq.generated.tables.pojos.RequirementCategory> fetchRangeOfVersionMajorNumber(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(RequirementCategory.REQUIREMENT_CATEGORY.VERSION_MAJOR_NUMBER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>VERSION_MAJOR_NUMBER IN (values)</code>
     */
    public List<org.jooq.generated.tables.pojos.RequirementCategory> fetchByVersionMajorNumber(Integer... values) {
        return fetch(RequirementCategory.REQUIREMENT_CATEGORY.VERSION_MAJOR_NUMBER, values);
    }

    /**
     * Fetch records that have <code>VERSION_MINOR_NUMBER BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<org.jooq.generated.tables.pojos.RequirementCategory> fetchRangeOfVersionMinorNumber(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(RequirementCategory.REQUIREMENT_CATEGORY.VERSION_MINOR_NUMBER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>VERSION_MINOR_NUMBER IN (values)</code>
     */
    public List<org.jooq.generated.tables.pojos.RequirementCategory> fetchByVersionMinorNumber(Integer... values) {
        return fetch(RequirementCategory.REQUIREMENT_CATEGORY.VERSION_MINOR_NUMBER, values);
    }

    /**
     * Fetch records that have <code>REQUIREMENT_CATEGORY_NAME BETWEEN
     * lowerInclusive AND upperInclusive</code>
     */
    public List<org.jooq.generated.tables.pojos.RequirementCategory> fetchRangeOfRequirementCategoryName(String lowerInclusive, String upperInclusive) {
        return fetchRange(RequirementCategory.REQUIREMENT_CATEGORY.REQUIREMENT_CATEGORY_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>REQUIREMENT_CATEGORY_NAME IN
     * (values)</code>
     */
    public List<org.jooq.generated.tables.pojos.RequirementCategory> fetchByRequirementCategoryName(String... values) {
        return fetch(RequirementCategory.REQUIREMENT_CATEGORY.REQUIREMENT_CATEGORY_NAME, values);
    }

    /**
     * Fetch records that have <code>REQUIREMENT_CATEGORY_PREFIX BETWEEN
     * lowerInclusive AND upperInclusive</code>
     */
    public List<org.jooq.generated.tables.pojos.RequirementCategory> fetchRangeOfRequirementCategoryPrefix(String lowerInclusive, String upperInclusive) {
        return fetchRange(RequirementCategory.REQUIREMENT_CATEGORY.REQUIREMENT_CATEGORY_PREFIX, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>REQUIREMENT_CATEGORY_PREFIX IN
     * (values)</code>
     */
    public List<org.jooq.generated.tables.pojos.RequirementCategory> fetchByRequirementCategoryPrefix(String... values) {
        return fetch(RequirementCategory.REQUIREMENT_CATEGORY.REQUIREMENT_CATEGORY_PREFIX, values);
    }

    /**
     * Fetch records that have <code>CREATED_AT BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.jooq.generated.tables.pojos.RequirementCategory> fetchRangeOfCreatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(RequirementCategory.REQUIREMENT_CATEGORY.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>CREATED_AT IN (values)</code>
     */
    public List<org.jooq.generated.tables.pojos.RequirementCategory> fetchByCreatedAt(LocalDateTime... values) {
        return fetch(RequirementCategory.REQUIREMENT_CATEGORY.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>UPDATED_AT BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.jooq.generated.tables.pojos.RequirementCategory> fetchRangeOfUpdatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(RequirementCategory.REQUIREMENT_CATEGORY.UPDATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>UPDATED_AT IN (values)</code>
     */
    public List<org.jooq.generated.tables.pojos.RequirementCategory> fetchByUpdatedAt(LocalDateTime... values) {
        return fetch(RequirementCategory.REQUIREMENT_CATEGORY.UPDATED_AT, values);
    }
}
