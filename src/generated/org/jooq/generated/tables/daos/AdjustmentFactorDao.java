/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.daos;


import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.generated.tables.AdjustmentFactor;
import org.jooq.generated.tables.records.AdjustmentFactorRecord;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AdjustmentFactorDao extends DAOImpl<AdjustmentFactorRecord, org.jooq.generated.tables.pojos.AdjustmentFactor, Long> {

    /**
     * Create a new AdjustmentFactorDao without any configuration
     */
    public AdjustmentFactorDao() {
        super(AdjustmentFactor.ADJUSTMENT_FACTOR, org.jooq.generated.tables.pojos.AdjustmentFactor.class);
    }

    /**
     * Create a new AdjustmentFactorDao with an attached configuration
     */
    public AdjustmentFactorDao(Configuration configuration) {
        super(AdjustmentFactor.ADJUSTMENT_FACTOR, org.jooq.generated.tables.pojos.AdjustmentFactor.class, configuration);
    }

    @Override
    public Long getId(org.jooq.generated.tables.pojos.AdjustmentFactor object) {
        return object.getAdjustmentFactorId();
    }

    /**
     * Fetch records that have <code>ADJUSTMENT_FACTOR_ID BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<org.jooq.generated.tables.pojos.AdjustmentFactor> fetchRangeOfAdjustmentFactorId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(AdjustmentFactor.ADJUSTMENT_FACTOR.ADJUSTMENT_FACTOR_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ADJUSTMENT_FACTOR_ID IN (values)</code>
     */
    public List<org.jooq.generated.tables.pojos.AdjustmentFactor> fetchByAdjustmentFactorId(Long... values) {
        return fetch(AdjustmentFactor.ADJUSTMENT_FACTOR.ADJUSTMENT_FACTOR_ID, values);
    }

    /**
     * Fetch a unique record that has <code>ADJUSTMENT_FACTOR_ID = value</code>
     */
    public org.jooq.generated.tables.pojos.AdjustmentFactor fetchOneByAdjustmentFactorId(Long value) {
        return fetchOne(AdjustmentFactor.ADJUSTMENT_FACTOR.ADJUSTMENT_FACTOR_ID, value);
    }

    /**
     * Fetch a unique record that has <code>ADJUSTMENT_FACTOR_ID = value</code>
     */
    public Optional<org.jooq.generated.tables.pojos.AdjustmentFactor> fetchOptionalByAdjustmentFactorId(Long value) {
        return fetchOptional(AdjustmentFactor.ADJUSTMENT_FACTOR.ADJUSTMENT_FACTOR_ID, value);
    }

    /**
     * Fetch records that have <code>PROJECT_ID BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.jooq.generated.tables.pojos.AdjustmentFactor> fetchRangeOfProjectId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(AdjustmentFactor.ADJUSTMENT_FACTOR.PROJECT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>PROJECT_ID IN (values)</code>
     */
    public List<org.jooq.generated.tables.pojos.AdjustmentFactor> fetchByProjectId(Long... values) {
        return fetch(AdjustmentFactor.ADJUSTMENT_FACTOR.PROJECT_ID, values);
    }

    /**
     * Fetch records that have <code>VERSION_MAJOR_NUMBER BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<org.jooq.generated.tables.pojos.AdjustmentFactor> fetchRangeOfVersionMajorNumber(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(AdjustmentFactor.ADJUSTMENT_FACTOR.VERSION_MAJOR_NUMBER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>VERSION_MAJOR_NUMBER IN (values)</code>
     */
    public List<org.jooq.generated.tables.pojos.AdjustmentFactor> fetchByVersionMajorNumber(Integer... values) {
        return fetch(AdjustmentFactor.ADJUSTMENT_FACTOR.VERSION_MAJOR_NUMBER, values);
    }

    /**
     * Fetch records that have <code>VERSION_MINOR_NUMBER BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<org.jooq.generated.tables.pojos.AdjustmentFactor> fetchRangeOfVersionMinorNumber(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(AdjustmentFactor.ADJUSTMENT_FACTOR.VERSION_MINOR_NUMBER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>VERSION_MINOR_NUMBER IN (values)</code>
     */
    public List<org.jooq.generated.tables.pojos.AdjustmentFactor> fetchByVersionMinorNumber(Integer... values) {
        return fetch(AdjustmentFactor.ADJUSTMENT_FACTOR.VERSION_MINOR_NUMBER, values);
    }

    /**
     * Fetch records that have <code>ADJUSTMENT_FACTOR_TYPE BETWEEN
     * lowerInclusive AND upperInclusive</code>
     */
    public List<org.jooq.generated.tables.pojos.AdjustmentFactor> fetchRangeOfAdjustmentFactorType(String lowerInclusive, String upperInclusive) {
        return fetchRange(AdjustmentFactor.ADJUSTMENT_FACTOR.ADJUSTMENT_FACTOR_TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ADJUSTMENT_FACTOR_TYPE IN (values)</code>
     */
    public List<org.jooq.generated.tables.pojos.AdjustmentFactor> fetchByAdjustmentFactorType(String... values) {
        return fetch(AdjustmentFactor.ADJUSTMENT_FACTOR.ADJUSTMENT_FACTOR_TYPE, values);
    }

    /**
     * Fetch records that have <code>ADJUSTMENT_FACTOR_LEVEL BETWEEN
     * lowerInclusive AND upperInclusive</code>
     */
    public List<org.jooq.generated.tables.pojos.AdjustmentFactor> fetchRangeOfAdjustmentFactorLevel(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(AdjustmentFactor.ADJUSTMENT_FACTOR.ADJUSTMENT_FACTOR_LEVEL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ADJUSTMENT_FACTOR_LEVEL IN (values)</code>
     */
    public List<org.jooq.generated.tables.pojos.AdjustmentFactor> fetchByAdjustmentFactorLevel(Integer... values) {
        return fetch(AdjustmentFactor.ADJUSTMENT_FACTOR.ADJUSTMENT_FACTOR_LEVEL, values);
    }

    /**
     * Fetch records that have <code>CREATED_AT BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.jooq.generated.tables.pojos.AdjustmentFactor> fetchRangeOfCreatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(AdjustmentFactor.ADJUSTMENT_FACTOR.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>CREATED_AT IN (values)</code>
     */
    public List<org.jooq.generated.tables.pojos.AdjustmentFactor> fetchByCreatedAt(LocalDateTime... values) {
        return fetch(AdjustmentFactor.ADJUSTMENT_FACTOR.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>UPDATED_AT BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.jooq.generated.tables.pojos.AdjustmentFactor> fetchRangeOfUpdatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(AdjustmentFactor.ADJUSTMENT_FACTOR.UPDATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>UPDATED_AT IN (values)</code>
     */
    public List<org.jooq.generated.tables.pojos.AdjustmentFactor> fetchByUpdatedAt(LocalDateTime... values) {
        return fetch(AdjustmentFactor.ADJUSTMENT_FACTOR.UPDATED_AT, values);
    }
}
