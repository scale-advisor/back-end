/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.daos;


import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.generated.tables.Requirement;
import org.jooq.generated.tables.records.RequirementRecord;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RequirementDao extends DAOImpl<RequirementRecord, org.jooq.generated.tables.pojos.Requirement, Long> {

    /**
     * Create a new RequirementDao without any configuration
     */
    public RequirementDao() {
        super(Requirement.REQUIREMENT, org.jooq.generated.tables.pojos.Requirement.class);
    }

    /**
     * Create a new RequirementDao with an attached configuration
     */
    public RequirementDao(Configuration configuration) {
        super(Requirement.REQUIREMENT, org.jooq.generated.tables.pojos.Requirement.class, configuration);
    }

    @Override
    public Long getId(org.jooq.generated.tables.pojos.Requirement object) {
        return object.getRequirementId();
    }

    /**
     * Fetch records that have <code>REQUIREMENT_ID BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.jooq.generated.tables.pojos.Requirement> fetchRangeOfRequirementId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Requirement.REQUIREMENT.REQUIREMENT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>REQUIREMENT_ID IN (values)</code>
     */
    public List<org.jooq.generated.tables.pojos.Requirement> fetchByRequirementId(Long... values) {
        return fetch(Requirement.REQUIREMENT.REQUIREMENT_ID, values);
    }

    /**
     * Fetch a unique record that has <code>REQUIREMENT_ID = value</code>
     */
    public org.jooq.generated.tables.pojos.Requirement fetchOneByRequirementId(Long value) {
        return fetchOne(Requirement.REQUIREMENT.REQUIREMENT_ID, value);
    }

    /**
     * Fetch a unique record that has <code>REQUIREMENT_ID = value</code>
     */
    public Optional<org.jooq.generated.tables.pojos.Requirement> fetchOptionalByRequirementId(Long value) {
        return fetchOptional(Requirement.REQUIREMENT.REQUIREMENT_ID, value);
    }

    /**
     * Fetch records that have <code>PROJECT_ID BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.jooq.generated.tables.pojos.Requirement> fetchRangeOfProjectId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Requirement.REQUIREMENT.PROJECT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>PROJECT_ID IN (values)</code>
     */
    public List<org.jooq.generated.tables.pojos.Requirement> fetchByProjectId(Long... values) {
        return fetch(Requirement.REQUIREMENT.PROJECT_ID, values);
    }

    /**
     * Fetch records that have <code>VERSION_MAJOR_NUMBER BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<org.jooq.generated.tables.pojos.Requirement> fetchRangeOfVersionMajorNumber(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Requirement.REQUIREMENT.VERSION_MAJOR_NUMBER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>VERSION_MAJOR_NUMBER IN (values)</code>
     */
    public List<org.jooq.generated.tables.pojos.Requirement> fetchByVersionMajorNumber(Integer... values) {
        return fetch(Requirement.REQUIREMENT.VERSION_MAJOR_NUMBER, values);
    }

    /**
     * Fetch records that have <code>VERSION_MINOR_NUMBER BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<org.jooq.generated.tables.pojos.Requirement> fetchRangeOfVersionMinorNumber(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Requirement.REQUIREMENT.VERSION_MINOR_NUMBER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>VERSION_MINOR_NUMBER IN (values)</code>
     */
    public List<org.jooq.generated.tables.pojos.Requirement> fetchByVersionMinorNumber(Integer... values) {
        return fetch(Requirement.REQUIREMENT.VERSION_MINOR_NUMBER, values);
    }

    /**
     * Fetch records that have <code>REQUIREMENT_NUMBER BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<org.jooq.generated.tables.pojos.Requirement> fetchRangeOfRequirementNumber(String lowerInclusive, String upperInclusive) {
        return fetchRange(Requirement.REQUIREMENT.REQUIREMENT_NUMBER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>REQUIREMENT_NUMBER IN (values)</code>
     */
    public List<org.jooq.generated.tables.pojos.Requirement> fetchByRequirementNumber(String... values) {
        return fetch(Requirement.REQUIREMENT.REQUIREMENT_NUMBER, values);
    }

    /**
     * Fetch records that have <code>REQUIREMENT_NAME BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.jooq.generated.tables.pojos.Requirement> fetchRangeOfRequirementName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Requirement.REQUIREMENT.REQUIREMENT_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>REQUIREMENT_NAME IN (values)</code>
     */
    public List<org.jooq.generated.tables.pojos.Requirement> fetchByRequirementName(String... values) {
        return fetch(Requirement.REQUIREMENT.REQUIREMENT_NAME, values);
    }

    /**
     * Fetch records that have <code>REQUIREMENT_DETAIL BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<org.jooq.generated.tables.pojos.Requirement> fetchRangeOfRequirementDetail(String lowerInclusive, String upperInclusive) {
        return fetchRange(Requirement.REQUIREMENT.REQUIREMENT_DETAIL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>REQUIREMENT_DETAIL IN (values)</code>
     */
    public List<org.jooq.generated.tables.pojos.Requirement> fetchByRequirementDetail(String... values) {
        return fetch(Requirement.REQUIREMENT.REQUIREMENT_DETAIL, values);
    }

    /**
     * Fetch records that have <code>REQUIREMENT_TYPE BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.jooq.generated.tables.pojos.Requirement> fetchRangeOfRequirementType(String lowerInclusive, String upperInclusive) {
        return fetchRange(Requirement.REQUIREMENT.REQUIREMENT_TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>REQUIREMENT_TYPE IN (values)</code>
     */
    public List<org.jooq.generated.tables.pojos.Requirement> fetchByRequirementType(String... values) {
        return fetch(Requirement.REQUIREMENT.REQUIREMENT_TYPE, values);
    }

    /**
     * Fetch records that have <code>CREATED_AT BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.jooq.generated.tables.pojos.Requirement> fetchRangeOfCreatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Requirement.REQUIREMENT.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>CREATED_AT IN (values)</code>
     */
    public List<org.jooq.generated.tables.pojos.Requirement> fetchByCreatedAt(LocalDateTime... values) {
        return fetch(Requirement.REQUIREMENT.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>UPDATED_AT BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.jooq.generated.tables.pojos.Requirement> fetchRangeOfUpdatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Requirement.REQUIREMENT.UPDATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>UPDATED_AT IN (values)</code>
     */
    public List<org.jooq.generated.tables.pojos.Requirement> fetchByUpdatedAt(LocalDateTime... values) {
        return fetch(Requirement.REQUIREMENT.UPDATED_AT, values);
    }

    /**
     * Fetch records that have <code>REQUIREMENT_DEFINITION BETWEEN
     * lowerInclusive AND upperInclusive</code>
     */
    public List<org.jooq.generated.tables.pojos.Requirement> fetchRangeOfRequirementDefinition(String lowerInclusive, String upperInclusive) {
        return fetchRange(Requirement.REQUIREMENT.REQUIREMENT_DEFINITION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>REQUIREMENT_DEFINITION IN (values)</code>
     */
    public List<org.jooq.generated.tables.pojos.Requirement> fetchByRequirementDefinition(String... values) {
        return fetch(Requirement.REQUIREMENT.REQUIREMENT_DEFINITION, values);
    }
}
