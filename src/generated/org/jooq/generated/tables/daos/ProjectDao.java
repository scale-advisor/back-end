/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.daos;


import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.generated.tables.Project;
import org.jooq.generated.tables.records.ProjectRecord;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProjectDao extends DAOImpl<ProjectRecord, org.jooq.generated.tables.pojos.Project, Long> {

    /**
     * Create a new ProjectDao without any configuration
     */
    public ProjectDao() {
        super(Project.PROJECT, org.jooq.generated.tables.pojos.Project.class);
    }

    /**
     * Create a new ProjectDao with an attached configuration
     */
    public ProjectDao(Configuration configuration) {
        super(Project.PROJECT, org.jooq.generated.tables.pojos.Project.class, configuration);
    }

    @Override
    public Long getId(org.jooq.generated.tables.pojos.Project object) {
        return object.getProjectId();
    }

    /**
     * Fetch records that have <code>PROJECT_ID BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.jooq.generated.tables.pojos.Project> fetchRangeOfProjectId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Project.PROJECT.PROJECT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>PROJECT_ID IN (values)</code>
     */
    public List<org.jooq.generated.tables.pojos.Project> fetchByProjectId(Long... values) {
        return fetch(Project.PROJECT.PROJECT_ID, values);
    }

    /**
     * Fetch a unique record that has <code>PROJECT_ID = value</code>
     */
    public org.jooq.generated.tables.pojos.Project fetchOneByProjectId(Long value) {
        return fetchOne(Project.PROJECT.PROJECT_ID, value);
    }

    /**
     * Fetch a unique record that has <code>PROJECT_ID = value</code>
     */
    public Optional<org.jooq.generated.tables.pojos.Project> fetchOptionalByProjectId(Long value) {
        return fetchOptional(Project.PROJECT.PROJECT_ID, value);
    }

    /**
     * Fetch records that have <code>NAME BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.jooq.generated.tables.pojos.Project> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Project.PROJECT.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>NAME IN (values)</code>
     */
    public List<org.jooq.generated.tables.pojos.Project> fetchByName(String... values) {
        return fetch(Project.PROJECT.NAME, values);
    }

    /**
     * Fetch records that have <code>DESCRIPTION BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.jooq.generated.tables.pojos.Project> fetchRangeOfDescription(String lowerInclusive, String upperInclusive) {
        return fetchRange(Project.PROJECT.DESCRIPTION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>DESCRIPTION IN (values)</code>
     */
    public List<org.jooq.generated.tables.pojos.Project> fetchByDescription(String... values) {
        return fetch(Project.PROJECT.DESCRIPTION, values);
    }

    /**
     * Fetch records that have <code>CREATED_AT BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.jooq.generated.tables.pojos.Project> fetchRangeOfCreatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Project.PROJECT.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>CREATED_AT IN (values)</code>
     */
    public List<org.jooq.generated.tables.pojos.Project> fetchByCreatedAt(LocalDateTime... values) {
        return fetch(Project.PROJECT.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>UPDATED_AT BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.jooq.generated.tables.pojos.Project> fetchRangeOfUpdatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Project.PROJECT.UPDATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>UPDATED_AT IN (values)</code>
     */
    public List<org.jooq.generated.tables.pojos.Project> fetchByUpdatedAt(LocalDateTime... values) {
        return fetch(Project.PROJECT.UPDATED_AT, values);
    }
}
