/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.daos;


import java.time.LocalDateTime;
import java.util.List;

import org.jooq.Configuration;
import org.jooq.Record2;
import org.jooq.generated.tables.UserProject;
import org.jooq.generated.tables.records.UserProjectRecord;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserProjectDao extends DAOImpl<UserProjectRecord, org.jooq.generated.tables.pojos.UserProject, Record2<Long, Long>> {

    /**
     * Create a new UserProjectDao without any configuration
     */
    public UserProjectDao() {
        super(UserProject.USER_PROJECT, org.jooq.generated.tables.pojos.UserProject.class);
    }

    /**
     * Create a new UserProjectDao with an attached configuration
     */
    public UserProjectDao(Configuration configuration) {
        super(UserProject.USER_PROJECT, org.jooq.generated.tables.pojos.UserProject.class, configuration);
    }

    @Override
    public Record2<Long, Long> getId(org.jooq.generated.tables.pojos.UserProject object) {
        return compositeKeyRecord(object.getUserId(), object.getProjectId());
    }

    /**
     * Fetch records that have <code>USER_ID BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.jooq.generated.tables.pojos.UserProject> fetchRangeOfUserId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(UserProject.USER_PROJECT.USER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>USER_ID IN (values)</code>
     */
    public List<org.jooq.generated.tables.pojos.UserProject> fetchByUserId(Long... values) {
        return fetch(UserProject.USER_PROJECT.USER_ID, values);
    }

    /**
     * Fetch records that have <code>PROJECT_ID BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.jooq.generated.tables.pojos.UserProject> fetchRangeOfProjectId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(UserProject.USER_PROJECT.PROJECT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>PROJECT_ID IN (values)</code>
     */
    public List<org.jooq.generated.tables.pojos.UserProject> fetchByProjectId(Long... values) {
        return fetch(UserProject.USER_PROJECT.PROJECT_ID, values);
    }

    /**
     * Fetch records that have <code>CREATED_AT BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.jooq.generated.tables.pojos.UserProject> fetchRangeOfCreatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(UserProject.USER_PROJECT.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>CREATED_AT IN (values)</code>
     */
    public List<org.jooq.generated.tables.pojos.UserProject> fetchByCreatedAt(LocalDateTime... values) {
        return fetch(UserProject.USER_PROJECT.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>UPDATED_AT BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.jooq.generated.tables.pojos.UserProject> fetchRangeOfUpdatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(UserProject.USER_PROJECT.UPDATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>UPDATED_AT IN (values)</code>
     */
    public List<org.jooq.generated.tables.pojos.UserProject> fetchByUpdatedAt(LocalDateTime... values) {
        return fetch(UserProject.USER_PROJECT.UPDATED_AT, values);
    }
}
